/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.base.rpc.thrift.account;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccountService {

  public interface Iface {

    public AccountInfo registerAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String email, String mobileNum, String password, String userName) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

    public void saveAvatar(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String selfUserId, String formatType, ByteBuffer dataContent) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

    public AccountInfo validateAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userAccount, String password) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String email, String mobileNum, String password, String userName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void saveAvatar(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String selfUserId, String formatType, ByteBuffer dataContent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveAvatar_call> resultHandler) throws org.apache.thrift.TException;

    public void validateAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userAccount, String password, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.validateAccount_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public AccountInfo registerAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String email, String mobileNum, String password, String userName) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_registerAccount(commArgs, email, mobileNum, password, userName);
      return recv_registerAccount();
    }

    public void send_registerAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String email, String mobileNum, String password, String userName) throws org.apache.thrift.TException
    {
      registerAccount_args args = new registerAccount_args();
      args.setCommArgs(commArgs);
      args.setEmail(email);
      args.setMobileNum(mobileNum);
      args.setPassword(password);
      args.setUserName(userName);
      sendBase("registerAccount", args);
    }

    public AccountInfo recv_registerAccount() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      registerAccount_result result = new registerAccount_result();
      receiveBase(result, "registerAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerAccount failed: unknown result");
    }

    public void saveAvatar(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String selfUserId, String formatType, ByteBuffer dataContent) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_saveAvatar(commArgs, selfUserId, formatType, dataContent);
      recv_saveAvatar();
    }

    public void send_saveAvatar(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String selfUserId, String formatType, ByteBuffer dataContent) throws org.apache.thrift.TException
    {
      saveAvatar_args args = new saveAvatar_args();
      args.setCommArgs(commArgs);
      args.setSelfUserId(selfUserId);
      args.setFormatType(formatType);
      args.setDataContent(dataContent);
      sendBase("saveAvatar", args);
    }

    public void recv_saveAvatar() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      saveAvatar_result result = new saveAvatar_result();
      receiveBase(result, "saveAvatar");
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      return;
    }

    public AccountInfo validateAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userAccount, String password) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_validateAccount(commArgs, userAccount, password);
      return recv_validateAccount();
    }

    public void send_validateAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userAccount, String password) throws org.apache.thrift.TException
    {
      validateAccount_args args = new validateAccount_args();
      args.setCommArgs(commArgs);
      args.setUserAccount(userAccount);
      args.setPassword(password);
      sendBase("validateAccount", args);
    }

    public AccountInfo recv_validateAccount() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      validateAccount_result result = new validateAccount_result();
      receiveBase(result, "validateAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateAccount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String email, String mobileNum, String password, String userName, org.apache.thrift.async.AsyncMethodCallback<registerAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerAccount_call method_call = new registerAccount_call(commArgs, email, mobileNum, password, userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      private String email;
      private String mobileNum;
      private String password;
      private String userName;
      public registerAccount_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String email, String mobileNum, String password, String userName, org.apache.thrift.async.AsyncMethodCallback<registerAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
        this.email = email;
        this.mobileNum = mobileNum;
        this.password = password;
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerAccount_args args = new registerAccount_args();
        args.setCommArgs(commArgs);
        args.setEmail(email);
        args.setMobileNum(mobileNum);
        args.setPassword(password);
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AccountInfo getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerAccount();
      }
    }

    public void saveAvatar(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String selfUserId, String formatType, ByteBuffer dataContent, org.apache.thrift.async.AsyncMethodCallback<saveAvatar_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAvatar_call method_call = new saveAvatar_call(commArgs, selfUserId, formatType, dataContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveAvatar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      private String selfUserId;
      private String formatType;
      private ByteBuffer dataContent;
      public saveAvatar_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String selfUserId, String formatType, ByteBuffer dataContent, org.apache.thrift.async.AsyncMethodCallback<saveAvatar_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
        this.selfUserId = selfUserId;
        this.formatType = formatType;
        this.dataContent = dataContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAvatar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAvatar_args args = new saveAvatar_args();
        args.setCommArgs(commArgs);
        args.setSelfUserId(selfUserId);
        args.setFormatType(formatType);
        args.setDataContent(dataContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveAvatar();
      }
    }

    public void validateAccount(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userAccount, String password, org.apache.thrift.async.AsyncMethodCallback<validateAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validateAccount_call method_call = new validateAccount_call(commArgs, userAccount, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validateAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      private String userAccount;
      private String password;
      public validateAccount_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userAccount, String password, org.apache.thrift.async.AsyncMethodCallback<validateAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
        this.userAccount = userAccount;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validateAccount_args args = new validateAccount_args();
        args.setCommArgs(commArgs);
        args.setUserAccount(userAccount);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AccountInfo getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validateAccount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerAccount", new registerAccount());
      processMap.put("saveAvatar", new saveAvatar());
      processMap.put("validateAccount", new validateAccount());
      return processMap;
    }

    private static class registerAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerAccount_args> {
      public registerAccount() {
        super("registerAccount");
      }

      protected registerAccount_args getEmptyArgsInstance() {
        return new registerAccount_args();
      }

      protected registerAccount_result getResult(I iface, registerAccount_args args) throws org.apache.thrift.TException {
        registerAccount_result result = new registerAccount_result();
        try {
          result.success = iface.registerAccount(args.commArgs, args.email, args.mobileNum, args.password, args.userName);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

    private static class saveAvatar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveAvatar_args> {
      public saveAvatar() {
        super("saveAvatar");
      }

      protected saveAvatar_args getEmptyArgsInstance() {
        return new saveAvatar_args();
      }

      protected saveAvatar_result getResult(I iface, saveAvatar_args args) throws org.apache.thrift.TException {
        saveAvatar_result result = new saveAvatar_result();
        try {
          iface.saveAvatar(args.commArgs, args.selfUserId, args.formatType, args.dataContent);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

    private static class validateAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateAccount_args> {
      public validateAccount() {
        super("validateAccount");
      }

      protected validateAccount_args getEmptyArgsInstance() {
        return new validateAccount_args();
      }

      protected validateAccount_result getResult(I iface, validateAccount_args args) throws org.apache.thrift.TException {
        validateAccount_result result = new validateAccount_result();
        try {
          result.success = iface.validateAccount(args.commArgs, args.userAccount, args.password);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

  }

  public static class registerAccount_args implements org.apache.thrift.TBase<registerAccount_args, registerAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerAccount_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MOBILE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNum", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerAccount_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required
    public String email; // required
    public String mobileNum; // required
    public String password; // required
    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs"),
      EMAIL((short)2, "email"),
      MOBILE_NUM((short)3, "mobileNum"),
      PASSWORD((short)4, "password"),
      USER_NAME((short)5, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          case 2: // EMAIL
            return EMAIL;
          case 3: // MOBILE_NUM
            return MOBILE_NUM;
          case 4: // PASSWORD
            return PASSWORD;
          case 5: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_NUM, new org.apache.thrift.meta_data.FieldMetaData("mobileNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerAccount_args.class, metaDataMap);
    }

    public registerAccount_args() {
    }

    public registerAccount_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs,
      String email,
      String mobileNum,
      String password,
      String userName)
    {
      this();
      this.commArgs = commArgs;
      this.email = email;
      this.mobileNum = mobileNum;
      this.password = password;
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerAccount_args(registerAccount_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetMobileNum()) {
        this.mobileNum = other.mobileNum;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public registerAccount_args deepCopy() {
      return new registerAccount_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
      this.email = null;
      this.mobileNum = null;
      this.password = null;
      this.userName = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public registerAccount_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public registerAccount_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getMobileNum() {
      return this.mobileNum;
    }

    public registerAccount_args setMobileNum(String mobileNum) {
      this.mobileNum = mobileNum;
      return this;
    }

    public void unsetMobileNum() {
      this.mobileNum = null;
    }

    /** Returns true if field mobileNum is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileNum() {
      return this.mobileNum != null;
    }

    public void setMobileNumIsSet(boolean value) {
      if (!value) {
        this.mobileNum = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public registerAccount_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getUserName() {
      return this.userName;
    }

    public registerAccount_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case MOBILE_NUM:
        if (value == null) {
          unsetMobileNum();
        } else {
          setMobileNum((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      case EMAIL:
        return getEmail();

      case MOBILE_NUM:
        return getMobileNum();

      case PASSWORD:
        return getPassword();

      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      case EMAIL:
        return isSetEmail();
      case MOBILE_NUM:
        return isSetMobileNum();
      case PASSWORD:
        return isSetPassword();
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerAccount_args)
        return this.equals((registerAccount_args)that);
      return false;
    }

    public boolean equals(registerAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_mobileNum = true && this.isSetMobileNum();
      boolean that_present_mobileNum = true && that.isSetMobileNum();
      if (this_present_mobileNum || that_present_mobileNum) {
        if (!(this_present_mobileNum && that_present_mobileNum))
          return false;
        if (!this.mobileNum.equals(that.mobileNum))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerAccount_args typedOther = (registerAccount_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileNum()).compareTo(typedOther.isSetMobileNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNum, typedOther.mobileNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerAccount_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileNum:");
      if (this.mobileNum == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerAccount_argsStandardSchemeFactory implements SchemeFactory {
      public registerAccount_argsStandardScheme getScheme() {
        return new registerAccount_argsStandardScheme();
      }
    }

    private static class registerAccount_argsStandardScheme extends StandardScheme<registerAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MOBILE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileNum = iprot.readString();
                struct.setMobileNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.mobileNum != null) {
          oprot.writeFieldBegin(MOBILE_NUM_FIELD_DESC);
          oprot.writeString(struct.mobileNum);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerAccount_argsTupleSchemeFactory implements SchemeFactory {
      public registerAccount_argsTupleScheme getScheme() {
        return new registerAccount_argsTupleScheme();
      }
    }

    private static class registerAccount_argsTupleScheme extends TupleScheme<registerAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        if (struct.isSetEmail()) {
          optionals.set(1);
        }
        if (struct.isSetMobileNum()) {
          optionals.set(2);
        }
        if (struct.isSetPassword()) {
          optionals.set(3);
        }
        if (struct.isSetUserName()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetMobileNum()) {
          oprot.writeString(struct.mobileNum);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mobileNum = iprot.readString();
          struct.setMobileNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class registerAccount_result implements org.apache.thrift.TBase<registerAccount_result, registerAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerAccount_resultTupleSchemeFactory());
    }

    public AccountInfo success; // required
    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountInfo.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerAccount_result.class, metaDataMap);
    }

    public registerAccount_result() {
    }

    public registerAccount_result(
      AccountInfo success,
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.success = success;
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerAccount_result(registerAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new AccountInfo(other.success);
      }
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public registerAccount_result deepCopy() {
      return new registerAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ae = null;
      this.be = null;
    }

    public AccountInfo getSuccess() {
      return this.success;
    }

    public registerAccount_result setSuccess(AccountInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public registerAccount_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public registerAccount_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AccountInfo)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerAccount_result)
        return this.equals((registerAccount_result)that);
      return false;
    }

    public boolean equals(registerAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerAccount_result typedOther = (registerAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerAccount_resultStandardSchemeFactory implements SchemeFactory {
      public registerAccount_resultStandardScheme getScheme() {
        return new registerAccount_resultStandardScheme();
      }
    }

    private static class registerAccount_resultStandardScheme extends StandardScheme<registerAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AccountInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerAccount_resultTupleSchemeFactory implements SchemeFactory {
      public registerAccount_resultTupleScheme getScheme() {
        return new registerAccount_resultTupleScheme();
      }
    }

    private static class registerAccount_resultTupleScheme extends TupleScheme<registerAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAe()) {
          optionals.set(1);
        }
        if (struct.isSetBe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new AccountInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

  public static class saveAvatar_args implements org.apache.thrift.TBase<saveAvatar_args, saveAvatar_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAvatar_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SELF_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("selfUserId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FORMAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("formatType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATA_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataContent", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveAvatar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveAvatar_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required
    public String selfUserId; // required
    public String formatType; // required
    public ByteBuffer dataContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs"),
      SELF_USER_ID((short)2, "selfUserId"),
      FORMAT_TYPE((short)3, "formatType"),
      DATA_CONTENT((short)4, "dataContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          case 2: // SELF_USER_ID
            return SELF_USER_ID;
          case 3: // FORMAT_TYPE
            return FORMAT_TYPE;
          case 4: // DATA_CONTENT
            return DATA_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      tmpMap.put(_Fields.SELF_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("selfUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FORMAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("formatType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("dataContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAvatar_args.class, metaDataMap);
    }

    public saveAvatar_args() {
    }

    public saveAvatar_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs,
      String selfUserId,
      String formatType,
      ByteBuffer dataContent)
    {
      this();
      this.commArgs = commArgs;
      this.selfUserId = selfUserId;
      this.formatType = formatType;
      this.dataContent = dataContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAvatar_args(saveAvatar_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
      if (other.isSetSelfUserId()) {
        this.selfUserId = other.selfUserId;
      }
      if (other.isSetFormatType()) {
        this.formatType = other.formatType;
      }
      if (other.isSetDataContent()) {
        this.dataContent = org.apache.thrift.TBaseHelper.copyBinary(other.dataContent);
;
      }
    }

    public saveAvatar_args deepCopy() {
      return new saveAvatar_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
      this.selfUserId = null;
      this.formatType = null;
      this.dataContent = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public saveAvatar_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public String getSelfUserId() {
      return this.selfUserId;
    }

    public saveAvatar_args setSelfUserId(String selfUserId) {
      this.selfUserId = selfUserId;
      return this;
    }

    public void unsetSelfUserId() {
      this.selfUserId = null;
    }

    /** Returns true if field selfUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetSelfUserId() {
      return this.selfUserId != null;
    }

    public void setSelfUserIdIsSet(boolean value) {
      if (!value) {
        this.selfUserId = null;
      }
    }

    public String getFormatType() {
      return this.formatType;
    }

    public saveAvatar_args setFormatType(String formatType) {
      this.formatType = formatType;
      return this;
    }

    public void unsetFormatType() {
      this.formatType = null;
    }

    /** Returns true if field formatType is set (has been assigned a value) and false otherwise */
    public boolean isSetFormatType() {
      return this.formatType != null;
    }

    public void setFormatTypeIsSet(boolean value) {
      if (!value) {
        this.formatType = null;
      }
    }

    public byte[] getDataContent() {
      setDataContent(org.apache.thrift.TBaseHelper.rightSize(dataContent));
      return dataContent == null ? null : dataContent.array();
    }

    public ByteBuffer bufferForDataContent() {
      return dataContent;
    }

    public saveAvatar_args setDataContent(byte[] dataContent) {
      setDataContent(dataContent == null ? (ByteBuffer)null : ByteBuffer.wrap(dataContent));
      return this;
    }

    public saveAvatar_args setDataContent(ByteBuffer dataContent) {
      this.dataContent = dataContent;
      return this;
    }

    public void unsetDataContent() {
      this.dataContent = null;
    }

    /** Returns true if field dataContent is set (has been assigned a value) and false otherwise */
    public boolean isSetDataContent() {
      return this.dataContent != null;
    }

    public void setDataContentIsSet(boolean value) {
      if (!value) {
        this.dataContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      case SELF_USER_ID:
        if (value == null) {
          unsetSelfUserId();
        } else {
          setSelfUserId((String)value);
        }
        break;

      case FORMAT_TYPE:
        if (value == null) {
          unsetFormatType();
        } else {
          setFormatType((String)value);
        }
        break;

      case DATA_CONTENT:
        if (value == null) {
          unsetDataContent();
        } else {
          setDataContent((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      case SELF_USER_ID:
        return getSelfUserId();

      case FORMAT_TYPE:
        return getFormatType();

      case DATA_CONTENT:
        return getDataContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      case SELF_USER_ID:
        return isSetSelfUserId();
      case FORMAT_TYPE:
        return isSetFormatType();
      case DATA_CONTENT:
        return isSetDataContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAvatar_args)
        return this.equals((saveAvatar_args)that);
      return false;
    }

    public boolean equals(saveAvatar_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      boolean this_present_selfUserId = true && this.isSetSelfUserId();
      boolean that_present_selfUserId = true && that.isSetSelfUserId();
      if (this_present_selfUserId || that_present_selfUserId) {
        if (!(this_present_selfUserId && that_present_selfUserId))
          return false;
        if (!this.selfUserId.equals(that.selfUserId))
          return false;
      }

      boolean this_present_formatType = true && this.isSetFormatType();
      boolean that_present_formatType = true && that.isSetFormatType();
      if (this_present_formatType || that_present_formatType) {
        if (!(this_present_formatType && that_present_formatType))
          return false;
        if (!this.formatType.equals(that.formatType))
          return false;
      }

      boolean this_present_dataContent = true && this.isSetDataContent();
      boolean that_present_dataContent = true && that.isSetDataContent();
      if (this_present_dataContent || that_present_dataContent) {
        if (!(this_present_dataContent && that_present_dataContent))
          return false;
        if (!this.dataContent.equals(that.dataContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAvatar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAvatar_args typedOther = (saveAvatar_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSelfUserId()).compareTo(typedOther.isSetSelfUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelfUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfUserId, typedOther.selfUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFormatType()).compareTo(typedOther.isSetFormatType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFormatType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formatType, typedOther.formatType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataContent()).compareTo(typedOther.isSetDataContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataContent, typedOther.dataContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAvatar_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("selfUserId:");
      if (this.selfUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.selfUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("formatType:");
      if (this.formatType == null) {
        sb.append("null");
      } else {
        sb.append(this.formatType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataContent:");
      if (this.dataContent == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.dataContent, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveAvatar_argsStandardSchemeFactory implements SchemeFactory {
      public saveAvatar_argsStandardScheme getScheme() {
        return new saveAvatar_argsStandardScheme();
      }
    }

    private static class saveAvatar_argsStandardScheme extends StandardScheme<saveAvatar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveAvatar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SELF_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.selfUserId = iprot.readString();
                struct.setSelfUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FORMAT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.formatType = iprot.readString();
                struct.setFormatTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATA_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataContent = iprot.readBinary();
                struct.setDataContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveAvatar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.selfUserId != null) {
          oprot.writeFieldBegin(SELF_USER_ID_FIELD_DESC);
          oprot.writeString(struct.selfUserId);
          oprot.writeFieldEnd();
        }
        if (struct.formatType != null) {
          oprot.writeFieldBegin(FORMAT_TYPE_FIELD_DESC);
          oprot.writeString(struct.formatType);
          oprot.writeFieldEnd();
        }
        if (struct.dataContent != null) {
          oprot.writeFieldBegin(DATA_CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.dataContent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveAvatar_argsTupleSchemeFactory implements SchemeFactory {
      public saveAvatar_argsTupleScheme getScheme() {
        return new saveAvatar_argsTupleScheme();
      }
    }

    private static class saveAvatar_argsTupleScheme extends TupleScheme<saveAvatar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveAvatar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSelfUserId()) {
          optionals.set(1);
        }
        if (struct.isSetFormatType()) {
          optionals.set(2);
        }
        if (struct.isSetDataContent()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
        if (struct.isSetSelfUserId()) {
          oprot.writeString(struct.selfUserId);
        }
        if (struct.isSetFormatType()) {
          oprot.writeString(struct.formatType);
        }
        if (struct.isSetDataContent()) {
          oprot.writeBinary(struct.dataContent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveAvatar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.selfUserId = iprot.readString();
          struct.setSelfUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.formatType = iprot.readString();
          struct.setFormatTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dataContent = iprot.readBinary();
          struct.setDataContentIsSet(true);
        }
      }
    }

  }

  public static class saveAvatar_result implements org.apache.thrift.TBase<saveAvatar_result, saveAvatar_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAvatar_result");

    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveAvatar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveAvatar_resultTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAvatar_result.class, metaDataMap);
    }

    public saveAvatar_result() {
    }

    public saveAvatar_result(
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAvatar_result(saveAvatar_result other) {
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public saveAvatar_result deepCopy() {
      return new saveAvatar_result(this);
    }

    @Override
    public void clear() {
      this.ae = null;
      this.be = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public saveAvatar_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public saveAvatar_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAvatar_result)
        return this.equals((saveAvatar_result)that);
      return false;
    }

    public boolean equals(saveAvatar_result that) {
      if (that == null)
        return false;

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAvatar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAvatar_result typedOther = (saveAvatar_result)other;

      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAvatar_result(");
      boolean first = true;

      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveAvatar_resultStandardSchemeFactory implements SchemeFactory {
      public saveAvatar_resultStandardScheme getScheme() {
        return new saveAvatar_resultStandardScheme();
      }
    }

    private static class saveAvatar_resultStandardScheme extends StandardScheme<saveAvatar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveAvatar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveAvatar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveAvatar_resultTupleSchemeFactory implements SchemeFactory {
      public saveAvatar_resultTupleScheme getScheme() {
        return new saveAvatar_resultTupleScheme();
      }
    }

    private static class saveAvatar_resultTupleScheme extends TupleScheme<saveAvatar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveAvatar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAe()) {
          optionals.set(0);
        }
        if (struct.isSetBe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveAvatar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

  public static class validateAccount_args implements org.apache.thrift.TBase<validateAccount_args, validateAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateAccount_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("userAccount", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateAccount_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required
    public String userAccount; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs"),
      USER_ACCOUNT((short)2, "userAccount"),
      PASSWORD((short)3, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          case 2: // USER_ACCOUNT
            return USER_ACCOUNT;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      tmpMap.put(_Fields.USER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("userAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateAccount_args.class, metaDataMap);
    }

    public validateAccount_args() {
    }

    public validateAccount_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs,
      String userAccount,
      String password)
    {
      this();
      this.commArgs = commArgs;
      this.userAccount = userAccount;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateAccount_args(validateAccount_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
      if (other.isSetUserAccount()) {
        this.userAccount = other.userAccount;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public validateAccount_args deepCopy() {
      return new validateAccount_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
      this.userAccount = null;
      this.password = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public validateAccount_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public String getUserAccount() {
      return this.userAccount;
    }

    public validateAccount_args setUserAccount(String userAccount) {
      this.userAccount = userAccount;
      return this;
    }

    public void unsetUserAccount() {
      this.userAccount = null;
    }

    /** Returns true if field userAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAccount() {
      return this.userAccount != null;
    }

    public void setUserAccountIsSet(boolean value) {
      if (!value) {
        this.userAccount = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public validateAccount_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      case USER_ACCOUNT:
        if (value == null) {
          unsetUserAccount();
        } else {
          setUserAccount((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      case USER_ACCOUNT:
        return getUserAccount();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      case USER_ACCOUNT:
        return isSetUserAccount();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateAccount_args)
        return this.equals((validateAccount_args)that);
      return false;
    }

    public boolean equals(validateAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      boolean this_present_userAccount = true && this.isSetUserAccount();
      boolean that_present_userAccount = true && that.isSetUserAccount();
      if (this_present_userAccount || that_present_userAccount) {
        if (!(this_present_userAccount && that_present_userAccount))
          return false;
        if (!this.userAccount.equals(that.userAccount))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(validateAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      validateAccount_args typedOther = (validateAccount_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserAccount()).compareTo(typedOther.isSetUserAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAccount, typedOther.userAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateAccount_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAccount:");
      if (this.userAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.userAccount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateAccount_argsStandardSchemeFactory implements SchemeFactory {
      public validateAccount_argsStandardScheme getScheme() {
        return new validateAccount_argsStandardScheme();
      }
    }

    private static class validateAccount_argsStandardScheme extends StandardScheme<validateAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAccount = iprot.readString();
                struct.setUserAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userAccount != null) {
          oprot.writeFieldBegin(USER_ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.userAccount);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateAccount_argsTupleSchemeFactory implements SchemeFactory {
      public validateAccount_argsTupleScheme getScheme() {
        return new validateAccount_argsTupleScheme();
      }
    }

    private static class validateAccount_argsTupleScheme extends TupleScheme<validateAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        if (struct.isSetUserAccount()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
        if (struct.isSetUserAccount()) {
          oprot.writeString(struct.userAccount);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userAccount = iprot.readString();
          struct.setUserAccountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class validateAccount_result implements org.apache.thrift.TBase<validateAccount_result, validateAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateAccount_resultTupleSchemeFactory());
    }

    public AccountInfo success; // required
    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountInfo.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateAccount_result.class, metaDataMap);
    }

    public validateAccount_result() {
    }

    public validateAccount_result(
      AccountInfo success,
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.success = success;
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateAccount_result(validateAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new AccountInfo(other.success);
      }
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public validateAccount_result deepCopy() {
      return new validateAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ae = null;
      this.be = null;
    }

    public AccountInfo getSuccess() {
      return this.success;
    }

    public validateAccount_result setSuccess(AccountInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public validateAccount_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public validateAccount_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AccountInfo)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateAccount_result)
        return this.equals((validateAccount_result)that);
      return false;
    }

    public boolean equals(validateAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(validateAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      validateAccount_result typedOther = (validateAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateAccount_resultStandardSchemeFactory implements SchemeFactory {
      public validateAccount_resultStandardScheme getScheme() {
        return new validateAccount_resultStandardScheme();
      }
    }

    private static class validateAccount_resultStandardScheme extends StandardScheme<validateAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AccountInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateAccount_resultTupleSchemeFactory implements SchemeFactory {
      public validateAccount_resultTupleScheme getScheme() {
        return new validateAccount_resultTupleScheme();
      }
    }

    private static class validateAccount_resultTupleScheme extends TupleScheme<validateAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAe()) {
          optionals.set(1);
        }
        if (struct.isSetBe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new AccountInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

}
