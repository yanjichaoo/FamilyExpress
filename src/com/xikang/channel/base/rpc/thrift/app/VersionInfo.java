/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.base.rpc.thrift.app;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VersionInfo implements org.apache.thrift.TBase<VersionInfo, VersionInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VersionInfo");

  private static final org.apache.thrift.protocol.TField CURRENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("currentStatus", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECOMMENDED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendedVersion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkUrl", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VersionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VersionInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see VersionStatus
   */
  public VersionStatus currentStatus; // required
  public String currentMessage; // required
  public String recommendedVersion; // required
  public String linkUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see VersionStatus
     */
    CURRENT_STATUS((short)1, "currentStatus"),
    CURRENT_MESSAGE((short)2, "currentMessage"),
    RECOMMENDED_VERSION((short)3, "recommendedVersion"),
    LINK_URL((short)4, "linkUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_STATUS
          return CURRENT_STATUS;
        case 2: // CURRENT_MESSAGE
          return CURRENT_MESSAGE;
        case 3: // RECOMMENDED_VERSION
          return RECOMMENDED_VERSION;
        case 4: // LINK_URL
          return LINK_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("currentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, VersionStatus.class)));
    tmpMap.put(_Fields.CURRENT_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("currentMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOMMENDED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("recommendedVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_URL, new org.apache.thrift.meta_data.FieldMetaData("linkUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VersionInfo.class, metaDataMap);
  }

  public VersionInfo() {
  }

  public VersionInfo(
    VersionStatus currentStatus,
    String currentMessage,
    String recommendedVersion,
    String linkUrl)
  {
    this();
    this.currentStatus = currentStatus;
    this.currentMessage = currentMessage;
    this.recommendedVersion = recommendedVersion;
    this.linkUrl = linkUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VersionInfo(VersionInfo other) {
    if (other.isSetCurrentStatus()) {
      this.currentStatus = other.currentStatus;
    }
    if (other.isSetCurrentMessage()) {
      this.currentMessage = other.currentMessage;
    }
    if (other.isSetRecommendedVersion()) {
      this.recommendedVersion = other.recommendedVersion;
    }
    if (other.isSetLinkUrl()) {
      this.linkUrl = other.linkUrl;
    }
  }

  public VersionInfo deepCopy() {
    return new VersionInfo(this);
  }

  @Override
  public void clear() {
    this.currentStatus = null;
    this.currentMessage = null;
    this.recommendedVersion = null;
    this.linkUrl = null;
  }

  /**
   * 
   * @see VersionStatus
   */
  public VersionStatus getCurrentStatus() {
    return this.currentStatus;
  }

  /**
   * 
   * @see VersionStatus
   */
  public VersionInfo setCurrentStatus(VersionStatus currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  public void unsetCurrentStatus() {
    this.currentStatus = null;
  }

  /** Returns true if field currentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentStatus() {
    return this.currentStatus != null;
  }

  public void setCurrentStatusIsSet(boolean value) {
    if (!value) {
      this.currentStatus = null;
    }
  }

  public String getCurrentMessage() {
    return this.currentMessage;
  }

  public VersionInfo setCurrentMessage(String currentMessage) {
    this.currentMessage = currentMessage;
    return this;
  }

  public void unsetCurrentMessage() {
    this.currentMessage = null;
  }

  /** Returns true if field currentMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMessage() {
    return this.currentMessage != null;
  }

  public void setCurrentMessageIsSet(boolean value) {
    if (!value) {
      this.currentMessage = null;
    }
  }

  public String getRecommendedVersion() {
    return this.recommendedVersion;
  }

  public VersionInfo setRecommendedVersion(String recommendedVersion) {
    this.recommendedVersion = recommendedVersion;
    return this;
  }

  public void unsetRecommendedVersion() {
    this.recommendedVersion = null;
  }

  /** Returns true if field recommendedVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendedVersion() {
    return this.recommendedVersion != null;
  }

  public void setRecommendedVersionIsSet(boolean value) {
    if (!value) {
      this.recommendedVersion = null;
    }
  }

  public String getLinkUrl() {
    return this.linkUrl;
  }

  public VersionInfo setLinkUrl(String linkUrl) {
    this.linkUrl = linkUrl;
    return this;
  }

  public void unsetLinkUrl() {
    this.linkUrl = null;
  }

  /** Returns true if field linkUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkUrl() {
    return this.linkUrl != null;
  }

  public void setLinkUrlIsSet(boolean value) {
    if (!value) {
      this.linkUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENT_STATUS:
      if (value == null) {
        unsetCurrentStatus();
      } else {
        setCurrentStatus((VersionStatus)value);
      }
      break;

    case CURRENT_MESSAGE:
      if (value == null) {
        unsetCurrentMessage();
      } else {
        setCurrentMessage((String)value);
      }
      break;

    case RECOMMENDED_VERSION:
      if (value == null) {
        unsetRecommendedVersion();
      } else {
        setRecommendedVersion((String)value);
      }
      break;

    case LINK_URL:
      if (value == null) {
        unsetLinkUrl();
      } else {
        setLinkUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_STATUS:
      return getCurrentStatus();

    case CURRENT_MESSAGE:
      return getCurrentMessage();

    case RECOMMENDED_VERSION:
      return getRecommendedVersion();

    case LINK_URL:
      return getLinkUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_STATUS:
      return isSetCurrentStatus();
    case CURRENT_MESSAGE:
      return isSetCurrentMessage();
    case RECOMMENDED_VERSION:
      return isSetRecommendedVersion();
    case LINK_URL:
      return isSetLinkUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VersionInfo)
      return this.equals((VersionInfo)that);
    return false;
  }

  public boolean equals(VersionInfo that) {
    if (that == null)
      return false;

    boolean this_present_currentStatus = true && this.isSetCurrentStatus();
    boolean that_present_currentStatus = true && that.isSetCurrentStatus();
    if (this_present_currentStatus || that_present_currentStatus) {
      if (!(this_present_currentStatus && that_present_currentStatus))
        return false;
      if (!this.currentStatus.equals(that.currentStatus))
        return false;
    }

    boolean this_present_currentMessage = true && this.isSetCurrentMessage();
    boolean that_present_currentMessage = true && that.isSetCurrentMessage();
    if (this_present_currentMessage || that_present_currentMessage) {
      if (!(this_present_currentMessage && that_present_currentMessage))
        return false;
      if (!this.currentMessage.equals(that.currentMessage))
        return false;
    }

    boolean this_present_recommendedVersion = true && this.isSetRecommendedVersion();
    boolean that_present_recommendedVersion = true && that.isSetRecommendedVersion();
    if (this_present_recommendedVersion || that_present_recommendedVersion) {
      if (!(this_present_recommendedVersion && that_present_recommendedVersion))
        return false;
      if (!this.recommendedVersion.equals(that.recommendedVersion))
        return false;
    }

    boolean this_present_linkUrl = true && this.isSetLinkUrl();
    boolean that_present_linkUrl = true && that.isSetLinkUrl();
    if (this_present_linkUrl || that_present_linkUrl) {
      if (!(this_present_linkUrl && that_present_linkUrl))
        return false;
      if (!this.linkUrl.equals(that.linkUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(VersionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    VersionInfo typedOther = (VersionInfo)other;

    lastComparison = Boolean.valueOf(isSetCurrentStatus()).compareTo(typedOther.isSetCurrentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentStatus, typedOther.currentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMessage()).compareTo(typedOther.isSetCurrentMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMessage, typedOther.currentMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendedVersion()).compareTo(typedOther.isSetRecommendedVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendedVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendedVersion, typedOther.recommendedVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkUrl()).compareTo(typedOther.isSetLinkUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkUrl, typedOther.linkUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VersionInfo(");
    boolean first = true;

    sb.append("currentStatus:");
    if (this.currentStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.currentStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentMessage:");
    if (this.currentMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.currentMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommendedVersion:");
    if (this.recommendedVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.recommendedVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkUrl:");
    if (this.linkUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.linkUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VersionInfoStandardSchemeFactory implements SchemeFactory {
    public VersionInfoStandardScheme getScheme() {
      return new VersionInfoStandardScheme();
    }
  }

  private static class VersionInfoStandardScheme extends StandardScheme<VersionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VersionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentStatus = VersionStatus.findByValue(iprot.readI32());
              struct.setCurrentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentMessage = iprot.readString();
              struct.setCurrentMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECOMMENDED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recommendedVersion = iprot.readString();
              struct.setRecommendedVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkUrl = iprot.readString();
              struct.setLinkUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VersionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.currentStatus != null) {
        oprot.writeFieldBegin(CURRENT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.currentStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.currentMessage != null) {
        oprot.writeFieldBegin(CURRENT_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.currentMessage);
        oprot.writeFieldEnd();
      }
      if (struct.recommendedVersion != null) {
        oprot.writeFieldBegin(RECOMMENDED_VERSION_FIELD_DESC);
        oprot.writeString(struct.recommendedVersion);
        oprot.writeFieldEnd();
      }
      if (struct.linkUrl != null) {
        oprot.writeFieldBegin(LINK_URL_FIELD_DESC);
        oprot.writeString(struct.linkUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VersionInfoTupleSchemeFactory implements SchemeFactory {
    public VersionInfoTupleScheme getScheme() {
      return new VersionInfoTupleScheme();
    }
  }

  private static class VersionInfoTupleScheme extends TupleScheme<VersionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VersionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrentStatus()) {
        optionals.set(0);
      }
      if (struct.isSetCurrentMessage()) {
        optionals.set(1);
      }
      if (struct.isSetRecommendedVersion()) {
        optionals.set(2);
      }
      if (struct.isSetLinkUrl()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCurrentStatus()) {
        oprot.writeI32(struct.currentStatus.getValue());
      }
      if (struct.isSetCurrentMessage()) {
        oprot.writeString(struct.currentMessage);
      }
      if (struct.isSetRecommendedVersion()) {
        oprot.writeString(struct.recommendedVersion);
      }
      if (struct.isSetLinkUrl()) {
        oprot.writeString(struct.linkUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VersionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.currentStatus = VersionStatus.findByValue(iprot.readI32());
        struct.setCurrentStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currentMessage = iprot.readString();
        struct.setCurrentMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.recommendedVersion = iprot.readString();
        struct.setRecommendedVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.linkUrl = iprot.readString();
        struct.setLinkUrlIsSet(true);
      }
    }
  }

}

