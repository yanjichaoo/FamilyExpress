/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.base.rpc.thrift.auth;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LoginResult implements org.apache.thrift.TBase<LoginResult, LoginResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoginResult");

  private static final org.apache.thrift.protocol.TField DIGEST_AUTHORIZATION_RES_FIELD_DESC = new org.apache.thrift.protocol.TField("digestAuthorizationRes", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField AUTH_USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("authUserInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_RESULT_EXT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("loginResultExtInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoginResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoginResultTupleSchemeFactory());
  }

  public com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes digestAuthorizationRes; // required
  public AuthUserInfo authUserInfo; // required
  public LoginResultExtInfo loginResultExtInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIGEST_AUTHORIZATION_RES((short)1, "digestAuthorizationRes"),
    AUTH_USER_INFO((short)2, "authUserInfo"),
    LOGIN_RESULT_EXT_INFO((short)3, "loginResultExtInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIGEST_AUTHORIZATION_RES
          return DIGEST_AUTHORIZATION_RES;
        case 2: // AUTH_USER_INFO
          return AUTH_USER_INFO;
        case 3: // LOGIN_RESULT_EXT_INFO
          return LOGIN_RESULT_EXT_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIGEST_AUTHORIZATION_RES, new org.apache.thrift.meta_data.FieldMetaData("digestAuthorizationRes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes.class)));
    tmpMap.put(_Fields.AUTH_USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("authUserInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthUserInfo.class)));
    tmpMap.put(_Fields.LOGIN_RESULT_EXT_INFO, new org.apache.thrift.meta_data.FieldMetaData("loginResultExtInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginResultExtInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoginResult.class, metaDataMap);
  }

  public LoginResult() {
  }

  public LoginResult(
    com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes digestAuthorizationRes,
    AuthUserInfo authUserInfo,
    LoginResultExtInfo loginResultExtInfo)
  {
    this();
    this.digestAuthorizationRes = digestAuthorizationRes;
    this.authUserInfo = authUserInfo;
    this.loginResultExtInfo = loginResultExtInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginResult(LoginResult other) {
    if (other.isSetDigestAuthorizationRes()) {
      this.digestAuthorizationRes = new com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes(other.digestAuthorizationRes);
    }
    if (other.isSetAuthUserInfo()) {
      this.authUserInfo = new AuthUserInfo(other.authUserInfo);
    }
    if (other.isSetLoginResultExtInfo()) {
      this.loginResultExtInfo = new LoginResultExtInfo(other.loginResultExtInfo);
    }
  }

  public LoginResult deepCopy() {
    return new LoginResult(this);
  }

  @Override
  public void clear() {
    this.digestAuthorizationRes = null;
    this.authUserInfo = null;
    this.loginResultExtInfo = null;
  }

  public com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes getDigestAuthorizationRes() {
    return this.digestAuthorizationRes;
  }

  public LoginResult setDigestAuthorizationRes(com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes digestAuthorizationRes) {
    this.digestAuthorizationRes = digestAuthorizationRes;
    return this;
  }

  public void unsetDigestAuthorizationRes() {
    this.digestAuthorizationRes = null;
  }

  /** Returns true if field digestAuthorizationRes is set (has been assigned a value) and false otherwise */
  public boolean isSetDigestAuthorizationRes() {
    return this.digestAuthorizationRes != null;
  }

  public void setDigestAuthorizationResIsSet(boolean value) {
    if (!value) {
      this.digestAuthorizationRes = null;
    }
  }

  public AuthUserInfo getAuthUserInfo() {
    return this.authUserInfo;
  }

  public LoginResult setAuthUserInfo(AuthUserInfo authUserInfo) {
    this.authUserInfo = authUserInfo;
    return this;
  }

  public void unsetAuthUserInfo() {
    this.authUserInfo = null;
  }

  /** Returns true if field authUserInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthUserInfo() {
    return this.authUserInfo != null;
  }

  public void setAuthUserInfoIsSet(boolean value) {
    if (!value) {
      this.authUserInfo = null;
    }
  }

  public LoginResultExtInfo getLoginResultExtInfo() {
    return this.loginResultExtInfo;
  }

  public LoginResult setLoginResultExtInfo(LoginResultExtInfo loginResultExtInfo) {
    this.loginResultExtInfo = loginResultExtInfo;
    return this;
  }

  public void unsetLoginResultExtInfo() {
    this.loginResultExtInfo = null;
  }

  /** Returns true if field loginResultExtInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginResultExtInfo() {
    return this.loginResultExtInfo != null;
  }

  public void setLoginResultExtInfoIsSet(boolean value) {
    if (!value) {
      this.loginResultExtInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIGEST_AUTHORIZATION_RES:
      if (value == null) {
        unsetDigestAuthorizationRes();
      } else {
        setDigestAuthorizationRes((com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes)value);
      }
      break;

    case AUTH_USER_INFO:
      if (value == null) {
        unsetAuthUserInfo();
      } else {
        setAuthUserInfo((AuthUserInfo)value);
      }
      break;

    case LOGIN_RESULT_EXT_INFO:
      if (value == null) {
        unsetLoginResultExtInfo();
      } else {
        setLoginResultExtInfo((LoginResultExtInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIGEST_AUTHORIZATION_RES:
      return getDigestAuthorizationRes();

    case AUTH_USER_INFO:
      return getAuthUserInfo();

    case LOGIN_RESULT_EXT_INFO:
      return getLoginResultExtInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIGEST_AUTHORIZATION_RES:
      return isSetDigestAuthorizationRes();
    case AUTH_USER_INFO:
      return isSetAuthUserInfo();
    case LOGIN_RESULT_EXT_INFO:
      return isSetLoginResultExtInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginResult)
      return this.equals((LoginResult)that);
    return false;
  }

  public boolean equals(LoginResult that) {
    if (that == null)
      return false;

    boolean this_present_digestAuthorizationRes = true && this.isSetDigestAuthorizationRes();
    boolean that_present_digestAuthorizationRes = true && that.isSetDigestAuthorizationRes();
    if (this_present_digestAuthorizationRes || that_present_digestAuthorizationRes) {
      if (!(this_present_digestAuthorizationRes && that_present_digestAuthorizationRes))
        return false;
      if (!this.digestAuthorizationRes.equals(that.digestAuthorizationRes))
        return false;
    }

    boolean this_present_authUserInfo = true && this.isSetAuthUserInfo();
    boolean that_present_authUserInfo = true && that.isSetAuthUserInfo();
    if (this_present_authUserInfo || that_present_authUserInfo) {
      if (!(this_present_authUserInfo && that_present_authUserInfo))
        return false;
      if (!this.authUserInfo.equals(that.authUserInfo))
        return false;
    }

    boolean this_present_loginResultExtInfo = true && this.isSetLoginResultExtInfo();
    boolean that_present_loginResultExtInfo = true && that.isSetLoginResultExtInfo();
    if (this_present_loginResultExtInfo || that_present_loginResultExtInfo) {
      if (!(this_present_loginResultExtInfo && that_present_loginResultExtInfo))
        return false;
      if (!this.loginResultExtInfo.equals(that.loginResultExtInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LoginResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LoginResult typedOther = (LoginResult)other;

    lastComparison = Boolean.valueOf(isSetDigestAuthorizationRes()).compareTo(typedOther.isSetDigestAuthorizationRes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigestAuthorizationRes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digestAuthorizationRes, typedOther.digestAuthorizationRes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthUserInfo()).compareTo(typedOther.isSetAuthUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthUserInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authUserInfo, typedOther.authUserInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginResultExtInfo()).compareTo(typedOther.isSetLoginResultExtInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginResultExtInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginResultExtInfo, typedOther.loginResultExtInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoginResult(");
    boolean first = true;

    sb.append("digestAuthorizationRes:");
    if (this.digestAuthorizationRes == null) {
      sb.append("null");
    } else {
      sb.append(this.digestAuthorizationRes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authUserInfo:");
    if (this.authUserInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.authUserInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginResultExtInfo:");
    if (this.loginResultExtInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.loginResultExtInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoginResultStandardSchemeFactory implements SchemeFactory {
    public LoginResultStandardScheme getScheme() {
      return new LoginResultStandardScheme();
    }
  }

  private static class LoginResultStandardScheme extends StandardScheme<LoginResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoginResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIGEST_AUTHORIZATION_RES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.digestAuthorizationRes = new com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes();
              struct.digestAuthorizationRes.read(iprot);
              struct.setDigestAuthorizationResIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTH_USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.authUserInfo = new AuthUserInfo();
              struct.authUserInfo.read(iprot);
              struct.setAuthUserInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_RESULT_EXT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loginResultExtInfo = new LoginResultExtInfo();
              struct.loginResultExtInfo.read(iprot);
              struct.setLoginResultExtInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoginResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.digestAuthorizationRes != null) {
        oprot.writeFieldBegin(DIGEST_AUTHORIZATION_RES_FIELD_DESC);
        struct.digestAuthorizationRes.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.authUserInfo != null) {
        oprot.writeFieldBegin(AUTH_USER_INFO_FIELD_DESC);
        struct.authUserInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.loginResultExtInfo != null) {
        oprot.writeFieldBegin(LOGIN_RESULT_EXT_INFO_FIELD_DESC);
        struct.loginResultExtInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoginResultTupleSchemeFactory implements SchemeFactory {
    public LoginResultTupleScheme getScheme() {
      return new LoginResultTupleScheme();
    }
  }

  private static class LoginResultTupleScheme extends TupleScheme<LoginResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoginResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDigestAuthorizationRes()) {
        optionals.set(0);
      }
      if (struct.isSetAuthUserInfo()) {
        optionals.set(1);
      }
      if (struct.isSetLoginResultExtInfo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDigestAuthorizationRes()) {
        struct.digestAuthorizationRes.write(oprot);
      }
      if (struct.isSetAuthUserInfo()) {
        struct.authUserInfo.write(oprot);
      }
      if (struct.isSetLoginResultExtInfo()) {
        struct.loginResultExtInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoginResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.digestAuthorizationRes = new com.xikang.channel.common.rpc.thrift.message.DigestAuthorizationRes();
        struct.digestAuthorizationRes.read(iprot);
        struct.setDigestAuthorizationResIsSet(true);
      }
      if (incoming.get(1)) {
        struct.authUserInfo = new AuthUserInfo();
        struct.authUserInfo.read(iprot);
        struct.setAuthUserInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loginResultExtInfo = new LoginResultExtInfo();
        struct.loginResultExtInfo.read(iprot);
        struct.setLoginResultExtInfoIsSet(true);
      }
    }
  }

}

