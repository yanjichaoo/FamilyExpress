/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.common.rpc.thrift.message;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DigestAuthorizationRes implements org.apache.thrift.TBase<DigestAuthorizationRes, DigestAuthorizationRes._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DigestAuthorizationRes");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INITIAL_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("initialToken", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INITIAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("initialCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RES_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("resSign", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AUTH_TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("authTtl", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DigestAuthorizationResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DigestAuthorizationResTupleSchemeFactory());
  }

  public String clientId; // required
  public String initialToken; // required
  public int initialCount; // required
  public String resSign; // required
  public int authTtl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_ID((short)1, "clientId"),
    INITIAL_TOKEN((short)2, "initialToken"),
    INITIAL_COUNT((short)3, "initialCount"),
    RES_SIGN((short)4, "resSign"),
    AUTH_TTL((short)5, "authTtl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // INITIAL_TOKEN
          return INITIAL_TOKEN;
        case 3: // INITIAL_COUNT
          return INITIAL_COUNT;
        case 4: // RES_SIGN
          return RES_SIGN;
        case 5: // AUTH_TTL
          return AUTH_TTL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INITIALCOUNT_ISSET_ID = 0;
  private static final int __AUTHTTL_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INITIAL_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("initialToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INITIAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("initialCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RES_SIGN, new org.apache.thrift.meta_data.FieldMetaData("resSign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_TTL, new org.apache.thrift.meta_data.FieldMetaData("authTtl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DigestAuthorizationRes.class, metaDataMap);
  }

  public DigestAuthorizationRes() {
  }

  public DigestAuthorizationRes(
    String clientId,
    String initialToken,
    int initialCount,
    String resSign,
    int authTtl)
  {
    this();
    this.clientId = clientId;
    this.initialToken = initialToken;
    this.initialCount = initialCount;
    setInitialCountIsSet(true);
    this.resSign = resSign;
    this.authTtl = authTtl;
    setAuthTtlIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DigestAuthorizationRes(DigestAuthorizationRes other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetInitialToken()) {
      this.initialToken = other.initialToken;
    }
    this.initialCount = other.initialCount;
    if (other.isSetResSign()) {
      this.resSign = other.resSign;
    }
    this.authTtl = other.authTtl;
  }

  public DigestAuthorizationRes deepCopy() {
    return new DigestAuthorizationRes(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.initialToken = null;
    setInitialCountIsSet(false);
    this.initialCount = 0;
    this.resSign = null;
    setAuthTtlIsSet(false);
    this.authTtl = 0;
  }

  public String getClientId() {
    return this.clientId;
  }

  public DigestAuthorizationRes setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public String getInitialToken() {
    return this.initialToken;
  }

  public DigestAuthorizationRes setInitialToken(String initialToken) {
    this.initialToken = initialToken;
    return this;
  }

  public void unsetInitialToken() {
    this.initialToken = null;
  }

  /** Returns true if field initialToken is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialToken() {
    return this.initialToken != null;
  }

  public void setInitialTokenIsSet(boolean value) {
    if (!value) {
      this.initialToken = null;
    }
  }

  public int getInitialCount() {
    return this.initialCount;
  }

  public DigestAuthorizationRes setInitialCount(int initialCount) {
    this.initialCount = initialCount;
    setInitialCountIsSet(true);
    return this;
  }

  public void unsetInitialCount() {
    __isset_bit_vector.clear(__INITIALCOUNT_ISSET_ID);
  }

  /** Returns true if field initialCount is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialCount() {
    return __isset_bit_vector.get(__INITIALCOUNT_ISSET_ID);
  }

  public void setInitialCountIsSet(boolean value) {
    __isset_bit_vector.set(__INITIALCOUNT_ISSET_ID, value);
  }

  public String getResSign() {
    return this.resSign;
  }

  public DigestAuthorizationRes setResSign(String resSign) {
    this.resSign = resSign;
    return this;
  }

  public void unsetResSign() {
    this.resSign = null;
  }

  /** Returns true if field resSign is set (has been assigned a value) and false otherwise */
  public boolean isSetResSign() {
    return this.resSign != null;
  }

  public void setResSignIsSet(boolean value) {
    if (!value) {
      this.resSign = null;
    }
  }

  public int getAuthTtl() {
    return this.authTtl;
  }

  public DigestAuthorizationRes setAuthTtl(int authTtl) {
    this.authTtl = authTtl;
    setAuthTtlIsSet(true);
    return this;
  }

  public void unsetAuthTtl() {
    __isset_bit_vector.clear(__AUTHTTL_ISSET_ID);
  }

  /** Returns true if field authTtl is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthTtl() {
    return __isset_bit_vector.get(__AUTHTTL_ISSET_ID);
  }

  public void setAuthTtlIsSet(boolean value) {
    __isset_bit_vector.set(__AUTHTTL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case INITIAL_TOKEN:
      if (value == null) {
        unsetInitialToken();
      } else {
        setInitialToken((String)value);
      }
      break;

    case INITIAL_COUNT:
      if (value == null) {
        unsetInitialCount();
      } else {
        setInitialCount((Integer)value);
      }
      break;

    case RES_SIGN:
      if (value == null) {
        unsetResSign();
      } else {
        setResSign((String)value);
      }
      break;

    case AUTH_TTL:
      if (value == null) {
        unsetAuthTtl();
      } else {
        setAuthTtl((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case INITIAL_TOKEN:
      return getInitialToken();

    case INITIAL_COUNT:
      return Integer.valueOf(getInitialCount());

    case RES_SIGN:
      return getResSign();

    case AUTH_TTL:
      return Integer.valueOf(getAuthTtl());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case INITIAL_TOKEN:
      return isSetInitialToken();
    case INITIAL_COUNT:
      return isSetInitialCount();
    case RES_SIGN:
      return isSetResSign();
    case AUTH_TTL:
      return isSetAuthTtl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DigestAuthorizationRes)
      return this.equals((DigestAuthorizationRes)that);
    return false;
  }

  public boolean equals(DigestAuthorizationRes that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_initialToken = true && this.isSetInitialToken();
    boolean that_present_initialToken = true && that.isSetInitialToken();
    if (this_present_initialToken || that_present_initialToken) {
      if (!(this_present_initialToken && that_present_initialToken))
        return false;
      if (!this.initialToken.equals(that.initialToken))
        return false;
    }

    boolean this_present_initialCount = true;
    boolean that_present_initialCount = true;
    if (this_present_initialCount || that_present_initialCount) {
      if (!(this_present_initialCount && that_present_initialCount))
        return false;
      if (this.initialCount != that.initialCount)
        return false;
    }

    boolean this_present_resSign = true && this.isSetResSign();
    boolean that_present_resSign = true && that.isSetResSign();
    if (this_present_resSign || that_present_resSign) {
      if (!(this_present_resSign && that_present_resSign))
        return false;
      if (!this.resSign.equals(that.resSign))
        return false;
    }

    boolean this_present_authTtl = true;
    boolean that_present_authTtl = true;
    if (this_present_authTtl || that_present_authTtl) {
      if (!(this_present_authTtl && that_present_authTtl))
        return false;
      if (this.authTtl != that.authTtl)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DigestAuthorizationRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DigestAuthorizationRes typedOther = (DigestAuthorizationRes)other;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(typedOther.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, typedOther.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialToken()).compareTo(typedOther.isSetInitialToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialToken, typedOther.initialToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialCount()).compareTo(typedOther.isSetInitialCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialCount, typedOther.initialCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResSign()).compareTo(typedOther.isSetResSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resSign, typedOther.resSign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthTtl()).compareTo(typedOther.isSetAuthTtl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthTtl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authTtl, typedOther.authTtl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DigestAuthorizationRes(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("initialToken:");
    if (this.initialToken == null) {
      sb.append("null");
    } else {
      sb.append(this.initialToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("initialCount:");
    sb.append(this.initialCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resSign:");
    if (this.resSign == null) {
      sb.append("null");
    } else {
      sb.append(this.resSign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authTtl:");
    sb.append(this.authTtl);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DigestAuthorizationResStandardSchemeFactory implements SchemeFactory {
    public DigestAuthorizationResStandardScheme getScheme() {
      return new DigestAuthorizationResStandardScheme();
    }
  }

  private static class DigestAuthorizationResStandardScheme extends StandardScheme<DigestAuthorizationRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DigestAuthorizationRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INITIAL_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.initialToken = iprot.readString();
              struct.setInitialTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INITIAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.initialCount = iprot.readI32();
              struct.setInitialCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RES_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resSign = iprot.readString();
              struct.setResSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTH_TTL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authTtl = iprot.readI32();
              struct.setAuthTtlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DigestAuthorizationRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.initialToken != null) {
        oprot.writeFieldBegin(INITIAL_TOKEN_FIELD_DESC);
        oprot.writeString(struct.initialToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INITIAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.initialCount);
      oprot.writeFieldEnd();
      if (struct.resSign != null) {
        oprot.writeFieldBegin(RES_SIGN_FIELD_DESC);
        oprot.writeString(struct.resSign);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUTH_TTL_FIELD_DESC);
      oprot.writeI32(struct.authTtl);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DigestAuthorizationResTupleSchemeFactory implements SchemeFactory {
    public DigestAuthorizationResTupleScheme getScheme() {
      return new DigestAuthorizationResTupleScheme();
    }
  }

  private static class DigestAuthorizationResTupleScheme extends TupleScheme<DigestAuthorizationRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DigestAuthorizationRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetInitialToken()) {
        optionals.set(1);
      }
      if (struct.isSetInitialCount()) {
        optionals.set(2);
      }
      if (struct.isSetResSign()) {
        optionals.set(3);
      }
      if (struct.isSetAuthTtl()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetInitialToken()) {
        oprot.writeString(struct.initialToken);
      }
      if (struct.isSetInitialCount()) {
        oprot.writeI32(struct.initialCount);
      }
      if (struct.isSetResSign()) {
        oprot.writeString(struct.resSign);
      }
      if (struct.isSetAuthTtl()) {
        oprot.writeI32(struct.authTtl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DigestAuthorizationRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.initialToken = iprot.readString();
        struct.setInitialTokenIsSet(true);
      }
      if (incoming.get(2)) {
        struct.initialCount = iprot.readI32();
        struct.setInitialCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.resSign = iprot.readString();
        struct.setResSignIsSet(true);
      }
      if (incoming.get(4)) {
        struct.authTtl = iprot.readI32();
        struct.setAuthTtlIsSet(true);
      }
    }
  }

}

