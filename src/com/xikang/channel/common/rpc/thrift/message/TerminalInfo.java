/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.common.rpc.thrift.message;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TerminalInfo implements org.apache.thrift.TBase<TerminalInfo, TerminalInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TerminalInfo");

  private static final org.apache.thrift.protocol.TField DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("OsVersion", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TerminalInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TerminalInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see DeviceType
   */
  public DeviceType deviceType; // required
  public String deviceId; // required
  public String OsVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see DeviceType
     */
    DEVICE_TYPE((short)1, "deviceType"),
    DEVICE_ID((short)2, "deviceId"),
    OS_VERSION((short)3, "OsVersion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_TYPE
          return DEVICE_TYPE;
        case 2: // DEVICE_ID
          return DEVICE_ID;
        case 3: // OS_VERSION
          return OS_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeviceType.class)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("OsVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TerminalInfo.class, metaDataMap);
  }

  public TerminalInfo() {
  }

  public TerminalInfo(
    DeviceType deviceType,
    String deviceId,
    String OsVersion)
  {
    this();
    this.deviceType = deviceType;
    this.deviceId = deviceId;
    this.OsVersion = OsVersion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TerminalInfo(TerminalInfo other) {
    if (other.isSetDeviceType()) {
      this.deviceType = other.deviceType;
    }
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetOsVersion()) {
      this.OsVersion = other.OsVersion;
    }
  }

  public TerminalInfo deepCopy() {
    return new TerminalInfo(this);
  }

  @Override
  public void clear() {
    this.deviceType = null;
    this.deviceId = null;
    this.OsVersion = null;
  }

  /**
   * 
   * @see DeviceType
   */
  public DeviceType getDeviceType() {
    return this.deviceType;
  }

  /**
   * 
   * @see DeviceType
   */
  public TerminalInfo setDeviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  public void unsetDeviceType() {
    this.deviceType = null;
  }

  /** Returns true if field deviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceType() {
    return this.deviceType != null;
  }

  public void setDeviceTypeIsSet(boolean value) {
    if (!value) {
      this.deviceType = null;
    }
  }

  public String getDeviceId() {
    return this.deviceId;
  }

  public TerminalInfo setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public String getOsVersion() {
    return this.OsVersion;
  }

  public TerminalInfo setOsVersion(String OsVersion) {
    this.OsVersion = OsVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.OsVersion = null;
  }

  /** Returns true if field OsVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.OsVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.OsVersion = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_TYPE:
      if (value == null) {
        unsetDeviceType();
      } else {
        setDeviceType((DeviceType)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_TYPE:
      return getDeviceType();

    case DEVICE_ID:
      return getDeviceId();

    case OS_VERSION:
      return getOsVersion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_TYPE:
      return isSetDeviceType();
    case DEVICE_ID:
      return isSetDeviceId();
    case OS_VERSION:
      return isSetOsVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TerminalInfo)
      return this.equals((TerminalInfo)that);
    return false;
  }

  public boolean equals(TerminalInfo that) {
    if (that == null)
      return false;

    boolean this_present_deviceType = true && this.isSetDeviceType();
    boolean that_present_deviceType = true && that.isSetDeviceType();
    if (this_present_deviceType || that_present_deviceType) {
      if (!(this_present_deviceType && that_present_deviceType))
        return false;
      if (!this.deviceType.equals(that.deviceType))
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_OsVersion = true && this.isSetOsVersion();
    boolean that_present_OsVersion = true && that.isSetOsVersion();
    if (this_present_OsVersion || that_present_OsVersion) {
      if (!(this_present_OsVersion && that_present_OsVersion))
        return false;
      if (!this.OsVersion.equals(that.OsVersion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TerminalInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TerminalInfo typedOther = (TerminalInfo)other;

    lastComparison = Boolean.valueOf(isSetDeviceType()).compareTo(typedOther.isSetDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceType, typedOther.deviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OsVersion, typedOther.OsVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TerminalInfo(");
    boolean first = true;

    sb.append("deviceType:");
    if (this.deviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceId:");
    if (this.deviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OsVersion:");
    if (this.OsVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.OsVersion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TerminalInfoStandardSchemeFactory implements SchemeFactory {
    public TerminalInfoStandardScheme getScheme() {
      return new TerminalInfoStandardScheme();
    }
  }

  private static class TerminalInfoStandardScheme extends StandardScheme<TerminalInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TerminalInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceType = DeviceType.findByValue(iprot.readI32());
              struct.setDeviceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OsVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TerminalInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceType != null) {
        oprot.writeFieldBegin(DEVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.deviceType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceId);
        oprot.writeFieldEnd();
      }
      if (struct.OsVersion != null) {
        oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
        oprot.writeString(struct.OsVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TerminalInfoTupleSchemeFactory implements SchemeFactory {
    public TerminalInfoTupleScheme getScheme() {
      return new TerminalInfoTupleScheme();
    }
  }

  private static class TerminalInfoTupleScheme extends TupleScheme<TerminalInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TerminalInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDeviceType()) {
        optionals.set(0);
      }
      if (struct.isSetDeviceId()) {
        optionals.set(1);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDeviceType()) {
        oprot.writeI32(struct.deviceType.getValue());
      }
      if (struct.isSetDeviceId()) {
        oprot.writeString(struct.deviceId);
      }
      if (struct.isSetOsVersion()) {
        oprot.writeString(struct.OsVersion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TerminalInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.deviceType = DeviceType.findByValue(iprot.readI32());
        struct.setDeviceTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deviceId = iprot.readString();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.OsVersion = iprot.readString();
        struct.setOsVersionIsSet(true);
      }
    }
  }

}

