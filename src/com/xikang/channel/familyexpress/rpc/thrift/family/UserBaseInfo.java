/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.familyexpress.rpc.thrift.family;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserBaseInfo implements org.apache.thrift.TBase<UserBaseInfo, UserBaseInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserBaseInfo");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NIKE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nikeName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("relation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ALLOW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("allowStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FIGURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("figureUrl", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserBaseInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserBaseInfoTupleSchemeFactory());
  }

  public String userId; // required
  public String userName; // required
  public String nikeName; // required
  public String relation; // required
  public String mobile; // required
  public String email; // required
  /**
   * 
   * @see AllowStatus
   */
  public AllowStatus allowStatus; // required
  public String figureUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_NAME((short)2, "userName"),
    NIKE_NAME((short)3, "nikeName"),
    RELATION((short)4, "relation"),
    MOBILE((short)5, "mobile"),
    EMAIL((short)6, "email"),
    /**
     * 
     * @see AllowStatus
     */
    ALLOW_STATUS((short)7, "allowStatus"),
    FIGURE_URL((short)8, "figureUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // NIKE_NAME
          return NIKE_NAME;
        case 4: // RELATION
          return RELATION;
        case 5: // MOBILE
          return MOBILE;
        case 6: // EMAIL
          return EMAIL;
        case 7: // ALLOW_STATUS
          return ALLOW_STATUS;
        case 8: // FIGURE_URL
          return FIGURE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NIKE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nikeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATION, new org.apache.thrift.meta_data.FieldMetaData("relation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("allowStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AllowStatus.class)));
    tmpMap.put(_Fields.FIGURE_URL, new org.apache.thrift.meta_data.FieldMetaData("figureUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserBaseInfo.class, metaDataMap);
  }

  public UserBaseInfo() {
  }

  public UserBaseInfo(
    String userId,
    String userName,
    String nikeName,
    String relation,
    String mobile,
    String email,
    AllowStatus allowStatus,
    String figureUrl)
  {
    this();
    this.userId = userId;
    this.userName = userName;
    this.nikeName = nikeName;
    this.relation = relation;
    this.mobile = mobile;
    this.email = email;
    this.allowStatus = allowStatus;
    this.figureUrl = figureUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserBaseInfo(UserBaseInfo other) {
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetNikeName()) {
      this.nikeName = other.nikeName;
    }
    if (other.isSetRelation()) {
      this.relation = other.relation;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetAllowStatus()) {
      this.allowStatus = other.allowStatus;
    }
    if (other.isSetFigureUrl()) {
      this.figureUrl = other.figureUrl;
    }
  }

  public UserBaseInfo deepCopy() {
    return new UserBaseInfo(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.userName = null;
    this.nikeName = null;
    this.relation = null;
    this.mobile = null;
    this.email = null;
    this.allowStatus = null;
    this.figureUrl = null;
  }

  public String getUserId() {
    return this.userId;
  }

  public UserBaseInfo setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public UserBaseInfo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getNikeName() {
    return this.nikeName;
  }

  public UserBaseInfo setNikeName(String nikeName) {
    this.nikeName = nikeName;
    return this;
  }

  public void unsetNikeName() {
    this.nikeName = null;
  }

  /** Returns true if field nikeName is set (has been assigned a value) and false otherwise */
  public boolean isSetNikeName() {
    return this.nikeName != null;
  }

  public void setNikeNameIsSet(boolean value) {
    if (!value) {
      this.nikeName = null;
    }
  }

  public String getRelation() {
    return this.relation;
  }

  public UserBaseInfo setRelation(String relation) {
    this.relation = relation;
    return this;
  }

  public void unsetRelation() {
    this.relation = null;
  }

  /** Returns true if field relation is set (has been assigned a value) and false otherwise */
  public boolean isSetRelation() {
    return this.relation != null;
  }

  public void setRelationIsSet(boolean value) {
    if (!value) {
      this.relation = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public UserBaseInfo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public UserBaseInfo setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  /**
   * 
   * @see AllowStatus
   */
  public AllowStatus getAllowStatus() {
    return this.allowStatus;
  }

  /**
   * 
   * @see AllowStatus
   */
  public UserBaseInfo setAllowStatus(AllowStatus allowStatus) {
    this.allowStatus = allowStatus;
    return this;
  }

  public void unsetAllowStatus() {
    this.allowStatus = null;
  }

  /** Returns true if field allowStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowStatus() {
    return this.allowStatus != null;
  }

  public void setAllowStatusIsSet(boolean value) {
    if (!value) {
      this.allowStatus = null;
    }
  }

  public String getFigureUrl() {
    return this.figureUrl;
  }

  public UserBaseInfo setFigureUrl(String figureUrl) {
    this.figureUrl = figureUrl;
    return this;
  }

  public void unsetFigureUrl() {
    this.figureUrl = null;
  }

  /** Returns true if field figureUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFigureUrl() {
    return this.figureUrl != null;
  }

  public void setFigureUrlIsSet(boolean value) {
    if (!value) {
      this.figureUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case NIKE_NAME:
      if (value == null) {
        unsetNikeName();
      } else {
        setNikeName((String)value);
      }
      break;

    case RELATION:
      if (value == null) {
        unsetRelation();
      } else {
        setRelation((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case ALLOW_STATUS:
      if (value == null) {
        unsetAllowStatus();
      } else {
        setAllowStatus((AllowStatus)value);
      }
      break;

    case FIGURE_URL:
      if (value == null) {
        unsetFigureUrl();
      } else {
        setFigureUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case USER_NAME:
      return getUserName();

    case NIKE_NAME:
      return getNikeName();

    case RELATION:
      return getRelation();

    case MOBILE:
      return getMobile();

    case EMAIL:
      return getEmail();

    case ALLOW_STATUS:
      return getAllowStatus();

    case FIGURE_URL:
      return getFigureUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case NIKE_NAME:
      return isSetNikeName();
    case RELATION:
      return isSetRelation();
    case MOBILE:
      return isSetMobile();
    case EMAIL:
      return isSetEmail();
    case ALLOW_STATUS:
      return isSetAllowStatus();
    case FIGURE_URL:
      return isSetFigureUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserBaseInfo)
      return this.equals((UserBaseInfo)that);
    return false;
  }

  public boolean equals(UserBaseInfo that) {
    if (that == null)
      return false;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_nikeName = true && this.isSetNikeName();
    boolean that_present_nikeName = true && that.isSetNikeName();
    if (this_present_nikeName || that_present_nikeName) {
      if (!(this_present_nikeName && that_present_nikeName))
        return false;
      if (!this.nikeName.equals(that.nikeName))
        return false;
    }

    boolean this_present_relation = true && this.isSetRelation();
    boolean that_present_relation = true && that.isSetRelation();
    if (this_present_relation || that_present_relation) {
      if (!(this_present_relation && that_present_relation))
        return false;
      if (!this.relation.equals(that.relation))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_allowStatus = true && this.isSetAllowStatus();
    boolean that_present_allowStatus = true && that.isSetAllowStatus();
    if (this_present_allowStatus || that_present_allowStatus) {
      if (!(this_present_allowStatus && that_present_allowStatus))
        return false;
      if (!this.allowStatus.equals(that.allowStatus))
        return false;
    }

    boolean this_present_figureUrl = true && this.isSetFigureUrl();
    boolean that_present_figureUrl = true && that.isSetFigureUrl();
    if (this_present_figureUrl || that_present_figureUrl) {
      if (!(this_present_figureUrl && that_present_figureUrl))
        return false;
      if (!this.figureUrl.equals(that.figureUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserBaseInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserBaseInfo typedOther = (UserBaseInfo)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNikeName()).compareTo(typedOther.isSetNikeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNikeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nikeName, typedOther.nikeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelation()).compareTo(typedOther.isSetRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relation, typedOther.relation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(typedOther.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, typedOther.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowStatus()).compareTo(typedOther.isSetAllowStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowStatus, typedOther.allowStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFigureUrl()).compareTo(typedOther.isSetFigureUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFigureUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.figureUrl, typedOther.figureUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserBaseInfo(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nikeName:");
    if (this.nikeName == null) {
      sb.append("null");
    } else {
      sb.append(this.nikeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relation:");
    if (this.relation == null) {
      sb.append("null");
    } else {
      sb.append(this.relation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowStatus:");
    if (this.allowStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.allowStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("figureUrl:");
    if (this.figureUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.figureUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserBaseInfoStandardSchemeFactory implements SchemeFactory {
    public UserBaseInfoStandardScheme getScheme() {
      return new UserBaseInfoStandardScheme();
    }
  }

  private static class UserBaseInfoStandardScheme extends StandardScheme<UserBaseInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserBaseInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NIKE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nikeName = iprot.readString();
              struct.setNikeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relation = iprot.readString();
              struct.setRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALLOW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.allowStatus = AllowStatus.findByValue(iprot.readI32());
              struct.setAllowStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIGURE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.figureUrl = iprot.readString();
              struct.setFigureUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserBaseInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.nikeName != null) {
        oprot.writeFieldBegin(NIKE_NAME_FIELD_DESC);
        oprot.writeString(struct.nikeName);
        oprot.writeFieldEnd();
      }
      if (struct.relation != null) {
        oprot.writeFieldBegin(RELATION_FIELD_DESC);
        oprot.writeString(struct.relation);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.allowStatus != null) {
        oprot.writeFieldBegin(ALLOW_STATUS_FIELD_DESC);
        oprot.writeI32(struct.allowStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.figureUrl != null) {
        oprot.writeFieldBegin(FIGURE_URL_FIELD_DESC);
        oprot.writeString(struct.figureUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserBaseInfoTupleSchemeFactory implements SchemeFactory {
    public UserBaseInfoTupleScheme getScheme() {
      return new UserBaseInfoTupleScheme();
    }
  }

  private static class UserBaseInfoTupleScheme extends TupleScheme<UserBaseInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserBaseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetNikeName()) {
        optionals.set(2);
      }
      if (struct.isSetRelation()) {
        optionals.set(3);
      }
      if (struct.isSetMobile()) {
        optionals.set(4);
      }
      if (struct.isSetEmail()) {
        optionals.set(5);
      }
      if (struct.isSetAllowStatus()) {
        optionals.set(6);
      }
      if (struct.isSetFigureUrl()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetNikeName()) {
        oprot.writeString(struct.nikeName);
      }
      if (struct.isSetRelation()) {
        oprot.writeString(struct.relation);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetAllowStatus()) {
        oprot.writeI32(struct.allowStatus.getValue());
      }
      if (struct.isSetFigureUrl()) {
        oprot.writeString(struct.figureUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserBaseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nikeName = iprot.readString();
        struct.setNikeNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.relation = iprot.readString();
        struct.setRelationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(5)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(6)) {
        struct.allowStatus = AllowStatus.findByValue(iprot.readI32());
        struct.setAllowStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.figureUrl = iprot.readString();
        struct.setFigureUrlIsSet(true);
      }
    }
  }

}

