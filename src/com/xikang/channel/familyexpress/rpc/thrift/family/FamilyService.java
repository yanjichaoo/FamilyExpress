/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.familyexpress.rpc.thrift.family;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FamilyService {

  public interface Iface {

    public List<MemberRelation> getMemberRelationCodeList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

    public List<MemberInfo> getFamilyMemberList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

    public List<UserBaseInfo> getFamilyMemberDetailList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

    public void addFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String titleCode, String nickname, Gender reRelationCode, boolean directlyAdd) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

    public void updateFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String nickname) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

    public void deleteFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

    public String getNoteMessage(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getMemberRelationCodeList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMemberRelationCodeList_call> resultHandler) throws org.apache.thrift.TException;

    public void getFamilyMemberList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFamilyMemberList_call> resultHandler) throws org.apache.thrift.TException;

    public void getFamilyMemberDetailList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFamilyMemberDetailList_call> resultHandler) throws org.apache.thrift.TException;

    public void addFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String titleCode, String nickname, Gender reRelationCode, boolean directlyAdd, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addFamilyMember_call> resultHandler) throws org.apache.thrift.TException;

    public void updateFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String nickname, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateFamilyMember_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteFamilyMember_call> resultHandler) throws org.apache.thrift.TException;

    public void getNoteMessage(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getNoteMessage_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<MemberRelation> getMemberRelationCodeList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_getMemberRelationCodeList(commArgs);
      return recv_getMemberRelationCodeList();
    }

    public void send_getMemberRelationCodeList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws org.apache.thrift.TException
    {
      getMemberRelationCodeList_args args = new getMemberRelationCodeList_args();
      args.setCommArgs(commArgs);
      sendBase("getMemberRelationCodeList", args);
    }

    public List<MemberRelation> recv_getMemberRelationCodeList() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      getMemberRelationCodeList_result result = new getMemberRelationCodeList_result();
      receiveBase(result, "getMemberRelationCodeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMemberRelationCodeList failed: unknown result");
    }

    public List<MemberInfo> getFamilyMemberList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_getFamilyMemberList(commArgs);
      return recv_getFamilyMemberList();
    }

    public void send_getFamilyMemberList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws org.apache.thrift.TException
    {
      getFamilyMemberList_args args = new getFamilyMemberList_args();
      args.setCommArgs(commArgs);
      sendBase("getFamilyMemberList", args);
    }

    public List<MemberInfo> recv_getFamilyMemberList() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      getFamilyMemberList_result result = new getFamilyMemberList_result();
      receiveBase(result, "getFamilyMemberList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFamilyMemberList failed: unknown result");
    }

    public List<UserBaseInfo> getFamilyMemberDetailList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_getFamilyMemberDetailList(commArgs);
      return recv_getFamilyMemberDetailList();
    }

    public void send_getFamilyMemberDetailList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws org.apache.thrift.TException
    {
      getFamilyMemberDetailList_args args = new getFamilyMemberDetailList_args();
      args.setCommArgs(commArgs);
      sendBase("getFamilyMemberDetailList", args);
    }

    public List<UserBaseInfo> recv_getFamilyMemberDetailList() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      getFamilyMemberDetailList_result result = new getFamilyMemberDetailList_result();
      receiveBase(result, "getFamilyMemberDetailList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFamilyMemberDetailList failed: unknown result");
    }

    public void addFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String titleCode, String nickname, Gender reRelationCode, boolean directlyAdd) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_addFamilyMember(commArgs, userId, titleCode, nickname, reRelationCode, directlyAdd);
      recv_addFamilyMember();
    }

    public void send_addFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String titleCode, String nickname, Gender reRelationCode, boolean directlyAdd) throws org.apache.thrift.TException
    {
      addFamilyMember_args args = new addFamilyMember_args();
      args.setCommArgs(commArgs);
      args.setUserId(userId);
      args.setTitleCode(titleCode);
      args.setNickname(nickname);
      args.setReRelationCode(reRelationCode);
      args.setDirectlyAdd(directlyAdd);
      sendBase("addFamilyMember", args);
    }

    public void recv_addFamilyMember() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      addFamilyMember_result result = new addFamilyMember_result();
      receiveBase(result, "addFamilyMember");
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      return;
    }

    public void updateFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String nickname) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_updateFamilyMember(commArgs, userId, nickname);
      recv_updateFamilyMember();
    }

    public void send_updateFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String nickname) throws org.apache.thrift.TException
    {
      updateFamilyMember_args args = new updateFamilyMember_args();
      args.setCommArgs(commArgs);
      args.setUserId(userId);
      args.setNickname(nickname);
      sendBase("updateFamilyMember", args);
    }

    public void recv_updateFamilyMember() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      updateFamilyMember_result result = new updateFamilyMember_result();
      receiveBase(result, "updateFamilyMember");
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      return;
    }

    public void deleteFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_deleteFamilyMember(commArgs, userId);
      recv_deleteFamilyMember();
    }

    public void send_deleteFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId) throws org.apache.thrift.TException
    {
      deleteFamilyMember_args args = new deleteFamilyMember_args();
      args.setCommArgs(commArgs);
      args.setUserId(userId);
      sendBase("deleteFamilyMember", args);
    }

    public void recv_deleteFamilyMember() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      deleteFamilyMember_result result = new deleteFamilyMember_result();
      receiveBase(result, "deleteFamilyMember");
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      return;
    }

    public String getNoteMessage(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      send_getNoteMessage(commArgs);
      return recv_getNoteMessage();
    }

    public void send_getNoteMessage(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) throws org.apache.thrift.TException
    {
      getNoteMessage_args args = new getNoteMessage_args();
      args.setCommArgs(commArgs);
      sendBase("getNoteMessage", args);
    }

    public String recv_getNoteMessage() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException
    {
      getNoteMessage_result result = new getNoteMessage_result();
      receiveBase(result, "getNoteMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      if (result.be != null) {
        throw result.be;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNoteMessage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getMemberRelationCodeList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<getMemberRelationCodeList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMemberRelationCodeList_call method_call = new getMemberRelationCodeList_call(commArgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMemberRelationCodeList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      public getMemberRelationCodeList_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<getMemberRelationCodeList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMemberRelationCodeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMemberRelationCodeList_args args = new getMemberRelationCodeList_args();
        args.setCommArgs(commArgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MemberRelation> getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMemberRelationCodeList();
      }
    }

    public void getFamilyMemberList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<getFamilyMemberList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFamilyMemberList_call method_call = new getFamilyMemberList_call(commArgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFamilyMemberList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      public getFamilyMemberList_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<getFamilyMemberList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFamilyMemberList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFamilyMemberList_args args = new getFamilyMemberList_args();
        args.setCommArgs(commArgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MemberInfo> getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFamilyMemberList();
      }
    }

    public void getFamilyMemberDetailList(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<getFamilyMemberDetailList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFamilyMemberDetailList_call method_call = new getFamilyMemberDetailList_call(commArgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFamilyMemberDetailList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      public getFamilyMemberDetailList_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<getFamilyMemberDetailList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFamilyMemberDetailList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFamilyMemberDetailList_args args = new getFamilyMemberDetailList_args();
        args.setCommArgs(commArgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<UserBaseInfo> getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFamilyMemberDetailList();
      }
    }

    public void addFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String titleCode, String nickname, Gender reRelationCode, boolean directlyAdd, org.apache.thrift.async.AsyncMethodCallback<addFamilyMember_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFamilyMember_call method_call = new addFamilyMember_call(commArgs, userId, titleCode, nickname, reRelationCode, directlyAdd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFamilyMember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      private String userId;
      private String titleCode;
      private String nickname;
      private Gender reRelationCode;
      private boolean directlyAdd;
      public addFamilyMember_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String titleCode, String nickname, Gender reRelationCode, boolean directlyAdd, org.apache.thrift.async.AsyncMethodCallback<addFamilyMember_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
        this.userId = userId;
        this.titleCode = titleCode;
        this.nickname = nickname;
        this.reRelationCode = reRelationCode;
        this.directlyAdd = directlyAdd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFamilyMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFamilyMember_args args = new addFamilyMember_args();
        args.setCommArgs(commArgs);
        args.setUserId(userId);
        args.setTitleCode(titleCode);
        args.setNickname(nickname);
        args.setReRelationCode(reRelationCode);
        args.setDirectlyAdd(directlyAdd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addFamilyMember();
      }
    }

    public void updateFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String nickname, org.apache.thrift.async.AsyncMethodCallback<updateFamilyMember_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFamilyMember_call method_call = new updateFamilyMember_call(commArgs, userId, nickname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFamilyMember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      private String userId;
      private String nickname;
      public updateFamilyMember_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, String nickname, org.apache.thrift.async.AsyncMethodCallback<updateFamilyMember_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
        this.userId = userId;
        this.nickname = nickname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFamilyMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFamilyMember_args args = new updateFamilyMember_args();
        args.setCommArgs(commArgs);
        args.setUserId(userId);
        args.setNickname(nickname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateFamilyMember();
      }
    }

    public void deleteFamilyMember(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, org.apache.thrift.async.AsyncMethodCallback<deleteFamilyMember_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFamilyMember_call method_call = new deleteFamilyMember_call(commArgs, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFamilyMember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      private String userId;
      public deleteFamilyMember_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, String userId, org.apache.thrift.async.AsyncMethodCallback<deleteFamilyMember_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFamilyMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFamilyMember_args args = new deleteFamilyMember_args();
        args.setCommArgs(commArgs);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteFamilyMember();
      }
    }

    public void getNoteMessage(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<getNoteMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNoteMessage_call method_call = new getNoteMessage_call(commArgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNoteMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs;
      public getNoteMessage_call(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs, org.apache.thrift.async.AsyncMethodCallback<getNoteMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commArgs = commArgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNoteMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNoteMessage_args args = new getNoteMessage_args();
        args.setCommArgs(commArgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.xikang.channel.common.rpc.thrift.message.AuthException, com.xikang.channel.common.rpc.thrift.message.BizException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNoteMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getMemberRelationCodeList", new getMemberRelationCodeList());
      processMap.put("getFamilyMemberList", new getFamilyMemberList());
      processMap.put("getFamilyMemberDetailList", new getFamilyMemberDetailList());
      processMap.put("addFamilyMember", new addFamilyMember());
      processMap.put("updateFamilyMember", new updateFamilyMember());
      processMap.put("deleteFamilyMember", new deleteFamilyMember());
      processMap.put("getNoteMessage", new getNoteMessage());
      return processMap;
    }

    private static class getMemberRelationCodeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMemberRelationCodeList_args> {
      public getMemberRelationCodeList() {
        super("getMemberRelationCodeList");
      }

      protected getMemberRelationCodeList_args getEmptyArgsInstance() {
        return new getMemberRelationCodeList_args();
      }

      protected getMemberRelationCodeList_result getResult(I iface, getMemberRelationCodeList_args args) throws org.apache.thrift.TException {
        getMemberRelationCodeList_result result = new getMemberRelationCodeList_result();
        try {
          result.success = iface.getMemberRelationCodeList(args.commArgs);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

    private static class getFamilyMemberList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFamilyMemberList_args> {
      public getFamilyMemberList() {
        super("getFamilyMemberList");
      }

      protected getFamilyMemberList_args getEmptyArgsInstance() {
        return new getFamilyMemberList_args();
      }

      protected getFamilyMemberList_result getResult(I iface, getFamilyMemberList_args args) throws org.apache.thrift.TException {
        getFamilyMemberList_result result = new getFamilyMemberList_result();
        try {
          result.success = iface.getFamilyMemberList(args.commArgs);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

    private static class getFamilyMemberDetailList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFamilyMemberDetailList_args> {
      public getFamilyMemberDetailList() {
        super("getFamilyMemberDetailList");
      }

      protected getFamilyMemberDetailList_args getEmptyArgsInstance() {
        return new getFamilyMemberDetailList_args();
      }

      protected getFamilyMemberDetailList_result getResult(I iface, getFamilyMemberDetailList_args args) throws org.apache.thrift.TException {
        getFamilyMemberDetailList_result result = new getFamilyMemberDetailList_result();
        try {
          result.success = iface.getFamilyMemberDetailList(args.commArgs);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

    private static class addFamilyMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFamilyMember_args> {
      public addFamilyMember() {
        super("addFamilyMember");
      }

      protected addFamilyMember_args getEmptyArgsInstance() {
        return new addFamilyMember_args();
      }

      protected addFamilyMember_result getResult(I iface, addFamilyMember_args args) throws org.apache.thrift.TException {
        addFamilyMember_result result = new addFamilyMember_result();
        try {
          iface.addFamilyMember(args.commArgs, args.userId, args.titleCode, args.nickname, args.reRelationCode, args.directlyAdd);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

    private static class updateFamilyMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFamilyMember_args> {
      public updateFamilyMember() {
        super("updateFamilyMember");
      }

      protected updateFamilyMember_args getEmptyArgsInstance() {
        return new updateFamilyMember_args();
      }

      protected updateFamilyMember_result getResult(I iface, updateFamilyMember_args args) throws org.apache.thrift.TException {
        updateFamilyMember_result result = new updateFamilyMember_result();
        try {
          iface.updateFamilyMember(args.commArgs, args.userId, args.nickname);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

    private static class deleteFamilyMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFamilyMember_args> {
      public deleteFamilyMember() {
        super("deleteFamilyMember");
      }

      protected deleteFamilyMember_args getEmptyArgsInstance() {
        return new deleteFamilyMember_args();
      }

      protected deleteFamilyMember_result getResult(I iface, deleteFamilyMember_args args) throws org.apache.thrift.TException {
        deleteFamilyMember_result result = new deleteFamilyMember_result();
        try {
          iface.deleteFamilyMember(args.commArgs, args.userId);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

    private static class getNoteMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNoteMessage_args> {
      public getNoteMessage() {
        super("getNoteMessage");
      }

      protected getNoteMessage_args getEmptyArgsInstance() {
        return new getNoteMessage_args();
      }

      protected getNoteMessage_result getResult(I iface, getNoteMessage_args args) throws org.apache.thrift.TException {
        getNoteMessage_result result = new getNoteMessage_result();
        try {
          result.success = iface.getNoteMessage(args.commArgs);
        } catch (com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
          result.ae = ae;
        } catch (com.xikang.channel.common.rpc.thrift.message.BizException be) {
          result.be = be;
        }
        return result;
      }
    }

  }

  public static class getMemberRelationCodeList_args implements org.apache.thrift.TBase<getMemberRelationCodeList_args, getMemberRelationCodeList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMemberRelationCodeList_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMemberRelationCodeList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMemberRelationCodeList_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMemberRelationCodeList_args.class, metaDataMap);
    }

    public getMemberRelationCodeList_args() {
    }

    public getMemberRelationCodeList_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs)
    {
      this();
      this.commArgs = commArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMemberRelationCodeList_args(getMemberRelationCodeList_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
    }

    public getMemberRelationCodeList_args deepCopy() {
      return new getMemberRelationCodeList_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public getMemberRelationCodeList_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMemberRelationCodeList_args)
        return this.equals((getMemberRelationCodeList_args)that);
      return false;
    }

    public boolean equals(getMemberRelationCodeList_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMemberRelationCodeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMemberRelationCodeList_args typedOther = (getMemberRelationCodeList_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMemberRelationCodeList_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMemberRelationCodeList_argsStandardSchemeFactory implements SchemeFactory {
      public getMemberRelationCodeList_argsStandardScheme getScheme() {
        return new getMemberRelationCodeList_argsStandardScheme();
      }
    }

    private static class getMemberRelationCodeList_argsStandardScheme extends StandardScheme<getMemberRelationCodeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMemberRelationCodeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMemberRelationCodeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMemberRelationCodeList_argsTupleSchemeFactory implements SchemeFactory {
      public getMemberRelationCodeList_argsTupleScheme getScheme() {
        return new getMemberRelationCodeList_argsTupleScheme();
      }
    }

    private static class getMemberRelationCodeList_argsTupleScheme extends TupleScheme<getMemberRelationCodeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMemberRelationCodeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMemberRelationCodeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
      }
    }

  }

  public static class getMemberRelationCodeList_result implements org.apache.thrift.TBase<getMemberRelationCodeList_result, getMemberRelationCodeList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMemberRelationCodeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMemberRelationCodeList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMemberRelationCodeList_resultTupleSchemeFactory());
    }

    public List<MemberRelation> success; // required
    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MemberRelation.class))));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMemberRelationCodeList_result.class, metaDataMap);
    }

    public getMemberRelationCodeList_result() {
    }

    public getMemberRelationCodeList_result(
      List<MemberRelation> success,
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.success = success;
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMemberRelationCodeList_result(getMemberRelationCodeList_result other) {
      if (other.isSetSuccess()) {
        List<MemberRelation> __this__success = new ArrayList<MemberRelation>();
        for (MemberRelation other_element : other.success) {
          __this__success.add(new MemberRelation(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public getMemberRelationCodeList_result deepCopy() {
      return new getMemberRelationCodeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ae = null;
      this.be = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MemberRelation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MemberRelation elem) {
      if (this.success == null) {
        this.success = new ArrayList<MemberRelation>();
      }
      this.success.add(elem);
    }

    public List<MemberRelation> getSuccess() {
      return this.success;
    }

    public getMemberRelationCodeList_result setSuccess(List<MemberRelation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public getMemberRelationCodeList_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public getMemberRelationCodeList_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MemberRelation>)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMemberRelationCodeList_result)
        return this.equals((getMemberRelationCodeList_result)that);
      return false;
    }

    public boolean equals(getMemberRelationCodeList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMemberRelationCodeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMemberRelationCodeList_result typedOther = (getMemberRelationCodeList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMemberRelationCodeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMemberRelationCodeList_resultStandardSchemeFactory implements SchemeFactory {
      public getMemberRelationCodeList_resultStandardScheme getScheme() {
        return new getMemberRelationCodeList_resultStandardScheme();
      }
    }

    private static class getMemberRelationCodeList_resultStandardScheme extends StandardScheme<getMemberRelationCodeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMemberRelationCodeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<MemberRelation>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    MemberRelation _elem2; // required
                    _elem2 = new MemberRelation();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMemberRelationCodeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MemberRelation _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMemberRelationCodeList_resultTupleSchemeFactory implements SchemeFactory {
      public getMemberRelationCodeList_resultTupleScheme getScheme() {
        return new getMemberRelationCodeList_resultTupleScheme();
      }
    }

    private static class getMemberRelationCodeList_resultTupleScheme extends TupleScheme<getMemberRelationCodeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMemberRelationCodeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAe()) {
          optionals.set(1);
        }
        if (struct.isSetBe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MemberRelation _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMemberRelationCodeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MemberRelation>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              MemberRelation _elem7; // required
              _elem7 = new MemberRelation();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

  public static class getFamilyMemberList_args implements org.apache.thrift.TBase<getFamilyMemberList_args, getFamilyMemberList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFamilyMemberList_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFamilyMemberList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFamilyMemberList_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFamilyMemberList_args.class, metaDataMap);
    }

    public getFamilyMemberList_args() {
    }

    public getFamilyMemberList_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs)
    {
      this();
      this.commArgs = commArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFamilyMemberList_args(getFamilyMemberList_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
    }

    public getFamilyMemberList_args deepCopy() {
      return new getFamilyMemberList_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public getFamilyMemberList_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFamilyMemberList_args)
        return this.equals((getFamilyMemberList_args)that);
      return false;
    }

    public boolean equals(getFamilyMemberList_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFamilyMemberList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFamilyMemberList_args typedOther = (getFamilyMemberList_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFamilyMemberList_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFamilyMemberList_argsStandardSchemeFactory implements SchemeFactory {
      public getFamilyMemberList_argsStandardScheme getScheme() {
        return new getFamilyMemberList_argsStandardScheme();
      }
    }

    private static class getFamilyMemberList_argsStandardScheme extends StandardScheme<getFamilyMemberList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFamilyMemberList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFamilyMemberList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFamilyMemberList_argsTupleSchemeFactory implements SchemeFactory {
      public getFamilyMemberList_argsTupleScheme getScheme() {
        return new getFamilyMemberList_argsTupleScheme();
      }
    }

    private static class getFamilyMemberList_argsTupleScheme extends TupleScheme<getFamilyMemberList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFamilyMemberList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFamilyMemberList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
      }
    }

  }

  public static class getFamilyMemberList_result implements org.apache.thrift.TBase<getFamilyMemberList_result, getFamilyMemberList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFamilyMemberList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFamilyMemberList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFamilyMemberList_resultTupleSchemeFactory());
    }

    public List<MemberInfo> success; // required
    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MemberInfo.class))));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFamilyMemberList_result.class, metaDataMap);
    }

    public getFamilyMemberList_result() {
    }

    public getFamilyMemberList_result(
      List<MemberInfo> success,
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.success = success;
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFamilyMemberList_result(getFamilyMemberList_result other) {
      if (other.isSetSuccess()) {
        List<MemberInfo> __this__success = new ArrayList<MemberInfo>();
        for (MemberInfo other_element : other.success) {
          __this__success.add(new MemberInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public getFamilyMemberList_result deepCopy() {
      return new getFamilyMemberList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ae = null;
      this.be = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MemberInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MemberInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<MemberInfo>();
      }
      this.success.add(elem);
    }

    public List<MemberInfo> getSuccess() {
      return this.success;
    }

    public getFamilyMemberList_result setSuccess(List<MemberInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public getFamilyMemberList_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public getFamilyMemberList_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MemberInfo>)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFamilyMemberList_result)
        return this.equals((getFamilyMemberList_result)that);
      return false;
    }

    public boolean equals(getFamilyMemberList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFamilyMemberList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFamilyMemberList_result typedOther = (getFamilyMemberList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFamilyMemberList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFamilyMemberList_resultStandardSchemeFactory implements SchemeFactory {
      public getFamilyMemberList_resultStandardScheme getScheme() {
        return new getFamilyMemberList_resultStandardScheme();
      }
    }

    private static class getFamilyMemberList_resultStandardScheme extends StandardScheme<getFamilyMemberList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFamilyMemberList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<MemberInfo>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    MemberInfo _elem10; // required
                    _elem10 = new MemberInfo();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFamilyMemberList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MemberInfo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFamilyMemberList_resultTupleSchemeFactory implements SchemeFactory {
      public getFamilyMemberList_resultTupleScheme getScheme() {
        return new getFamilyMemberList_resultTupleScheme();
      }
    }

    private static class getFamilyMemberList_resultTupleScheme extends TupleScheme<getFamilyMemberList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFamilyMemberList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAe()) {
          optionals.set(1);
        }
        if (struct.isSetBe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MemberInfo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFamilyMemberList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MemberInfo>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              MemberInfo _elem15; // required
              _elem15 = new MemberInfo();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

  public static class getFamilyMemberDetailList_args implements org.apache.thrift.TBase<getFamilyMemberDetailList_args, getFamilyMemberDetailList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFamilyMemberDetailList_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFamilyMemberDetailList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFamilyMemberDetailList_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFamilyMemberDetailList_args.class, metaDataMap);
    }

    public getFamilyMemberDetailList_args() {
    }

    public getFamilyMemberDetailList_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs)
    {
      this();
      this.commArgs = commArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFamilyMemberDetailList_args(getFamilyMemberDetailList_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
    }

    public getFamilyMemberDetailList_args deepCopy() {
      return new getFamilyMemberDetailList_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public getFamilyMemberDetailList_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFamilyMemberDetailList_args)
        return this.equals((getFamilyMemberDetailList_args)that);
      return false;
    }

    public boolean equals(getFamilyMemberDetailList_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFamilyMemberDetailList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFamilyMemberDetailList_args typedOther = (getFamilyMemberDetailList_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFamilyMemberDetailList_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFamilyMemberDetailList_argsStandardSchemeFactory implements SchemeFactory {
      public getFamilyMemberDetailList_argsStandardScheme getScheme() {
        return new getFamilyMemberDetailList_argsStandardScheme();
      }
    }

    private static class getFamilyMemberDetailList_argsStandardScheme extends StandardScheme<getFamilyMemberDetailList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFamilyMemberDetailList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFamilyMemberDetailList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFamilyMemberDetailList_argsTupleSchemeFactory implements SchemeFactory {
      public getFamilyMemberDetailList_argsTupleScheme getScheme() {
        return new getFamilyMemberDetailList_argsTupleScheme();
      }
    }

    private static class getFamilyMemberDetailList_argsTupleScheme extends TupleScheme<getFamilyMemberDetailList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFamilyMemberDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFamilyMemberDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
      }
    }

  }

  public static class getFamilyMemberDetailList_result implements org.apache.thrift.TBase<getFamilyMemberDetailList_result, getFamilyMemberDetailList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFamilyMemberDetailList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFamilyMemberDetailList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFamilyMemberDetailList_resultTupleSchemeFactory());
    }

    public List<UserBaseInfo> success; // required
    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserBaseInfo.class))));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFamilyMemberDetailList_result.class, metaDataMap);
    }

    public getFamilyMemberDetailList_result() {
    }

    public getFamilyMemberDetailList_result(
      List<UserBaseInfo> success,
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.success = success;
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFamilyMemberDetailList_result(getFamilyMemberDetailList_result other) {
      if (other.isSetSuccess()) {
        List<UserBaseInfo> __this__success = new ArrayList<UserBaseInfo>();
        for (UserBaseInfo other_element : other.success) {
          __this__success.add(new UserBaseInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public getFamilyMemberDetailList_result deepCopy() {
      return new getFamilyMemberDetailList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ae = null;
      this.be = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<UserBaseInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(UserBaseInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<UserBaseInfo>();
      }
      this.success.add(elem);
    }

    public List<UserBaseInfo> getSuccess() {
      return this.success;
    }

    public getFamilyMemberDetailList_result setSuccess(List<UserBaseInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public getFamilyMemberDetailList_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public getFamilyMemberDetailList_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<UserBaseInfo>)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFamilyMemberDetailList_result)
        return this.equals((getFamilyMemberDetailList_result)that);
      return false;
    }

    public boolean equals(getFamilyMemberDetailList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFamilyMemberDetailList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFamilyMemberDetailList_result typedOther = (getFamilyMemberDetailList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFamilyMemberDetailList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFamilyMemberDetailList_resultStandardSchemeFactory implements SchemeFactory {
      public getFamilyMemberDetailList_resultStandardScheme getScheme() {
        return new getFamilyMemberDetailList_resultStandardScheme();
      }
    }

    private static class getFamilyMemberDetailList_resultStandardScheme extends StandardScheme<getFamilyMemberDetailList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFamilyMemberDetailList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<UserBaseInfo>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    UserBaseInfo _elem18; // required
                    _elem18 = new UserBaseInfo();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFamilyMemberDetailList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (UserBaseInfo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFamilyMemberDetailList_resultTupleSchemeFactory implements SchemeFactory {
      public getFamilyMemberDetailList_resultTupleScheme getScheme() {
        return new getFamilyMemberDetailList_resultTupleScheme();
      }
    }

    private static class getFamilyMemberDetailList_resultTupleScheme extends TupleScheme<getFamilyMemberDetailList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFamilyMemberDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAe()) {
          optionals.set(1);
        }
        if (struct.isSetBe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (UserBaseInfo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFamilyMemberDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<UserBaseInfo>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              UserBaseInfo _elem23; // required
              _elem23 = new UserBaseInfo();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

  public static class addFamilyMember_args implements org.apache.thrift.TBase<addFamilyMember_args, addFamilyMember_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFamilyMember_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TITLE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("titleCode", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField RE_RELATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("reRelationCode", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField DIRECTLY_ADD_FIELD_DESC = new org.apache.thrift.protocol.TField("directlyAdd", org.apache.thrift.protocol.TType.BOOL, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFamilyMember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFamilyMember_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required
    public String userId; // required
    public String titleCode; // required
    public String nickname; // required
    /**
     * 
     * @see Gender
     */
    public Gender reRelationCode; // required
    public boolean directlyAdd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs"),
      USER_ID((short)2, "userId"),
      TITLE_CODE((short)3, "titleCode"),
      NICKNAME((short)4, "nickname"),
      /**
       * 
       * @see Gender
       */
      RE_RELATION_CODE((short)5, "reRelationCode"),
      DIRECTLY_ADD((short)6, "directlyAdd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TITLE_CODE
            return TITLE_CODE;
          case 4: // NICKNAME
            return NICKNAME;
          case 5: // RE_RELATION_CODE
            return RE_RELATION_CODE;
          case 6: // DIRECTLY_ADD
            return DIRECTLY_ADD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIRECTLYADD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE_CODE, new org.apache.thrift.meta_data.FieldMetaData("titleCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RE_RELATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("reRelationCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Gender.class)));
      tmpMap.put(_Fields.DIRECTLY_ADD, new org.apache.thrift.meta_data.FieldMetaData("directlyAdd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFamilyMember_args.class, metaDataMap);
    }

    public addFamilyMember_args() {
    }

    public addFamilyMember_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs,
      String userId,
      String titleCode,
      String nickname,
      Gender reRelationCode,
      boolean directlyAdd)
    {
      this();
      this.commArgs = commArgs;
      this.userId = userId;
      this.titleCode = titleCode;
      this.nickname = nickname;
      this.reRelationCode = reRelationCode;
      this.directlyAdd = directlyAdd;
      setDirectlyAddIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFamilyMember_args(addFamilyMember_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetTitleCode()) {
        this.titleCode = other.titleCode;
      }
      if (other.isSetNickname()) {
        this.nickname = other.nickname;
      }
      if (other.isSetReRelationCode()) {
        this.reRelationCode = other.reRelationCode;
      }
      this.directlyAdd = other.directlyAdd;
    }

    public addFamilyMember_args deepCopy() {
      return new addFamilyMember_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
      this.userId = null;
      this.titleCode = null;
      this.nickname = null;
      this.reRelationCode = null;
      setDirectlyAddIsSet(false);
      this.directlyAdd = false;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public addFamilyMember_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public addFamilyMember_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getTitleCode() {
      return this.titleCode;
    }

    public addFamilyMember_args setTitleCode(String titleCode) {
      this.titleCode = titleCode;
      return this;
    }

    public void unsetTitleCode() {
      this.titleCode = null;
    }

    /** Returns true if field titleCode is set (has been assigned a value) and false otherwise */
    public boolean isSetTitleCode() {
      return this.titleCode != null;
    }

    public void setTitleCodeIsSet(boolean value) {
      if (!value) {
        this.titleCode = null;
      }
    }

    public String getNickname() {
      return this.nickname;
    }

    public addFamilyMember_args setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    public void unsetNickname() {
      this.nickname = null;
    }

    /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
    public boolean isSetNickname() {
      return this.nickname != null;
    }

    public void setNicknameIsSet(boolean value) {
      if (!value) {
        this.nickname = null;
      }
    }

    /**
     * 
     * @see Gender
     */
    public Gender getReRelationCode() {
      return this.reRelationCode;
    }

    /**
     * 
     * @see Gender
     */
    public addFamilyMember_args setReRelationCode(Gender reRelationCode) {
      this.reRelationCode = reRelationCode;
      return this;
    }

    public void unsetReRelationCode() {
      this.reRelationCode = null;
    }

    /** Returns true if field reRelationCode is set (has been assigned a value) and false otherwise */
    public boolean isSetReRelationCode() {
      return this.reRelationCode != null;
    }

    public void setReRelationCodeIsSet(boolean value) {
      if (!value) {
        this.reRelationCode = null;
      }
    }

    public boolean isDirectlyAdd() {
      return this.directlyAdd;
    }

    public addFamilyMember_args setDirectlyAdd(boolean directlyAdd) {
      this.directlyAdd = directlyAdd;
      setDirectlyAddIsSet(true);
      return this;
    }

    public void unsetDirectlyAdd() {
      __isset_bit_vector.clear(__DIRECTLYADD_ISSET_ID);
    }

    /** Returns true if field directlyAdd is set (has been assigned a value) and false otherwise */
    public boolean isSetDirectlyAdd() {
      return __isset_bit_vector.get(__DIRECTLYADD_ISSET_ID);
    }

    public void setDirectlyAddIsSet(boolean value) {
      __isset_bit_vector.set(__DIRECTLYADD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case TITLE_CODE:
        if (value == null) {
          unsetTitleCode();
        } else {
          setTitleCode((String)value);
        }
        break;

      case NICKNAME:
        if (value == null) {
          unsetNickname();
        } else {
          setNickname((String)value);
        }
        break;

      case RE_RELATION_CODE:
        if (value == null) {
          unsetReRelationCode();
        } else {
          setReRelationCode((Gender)value);
        }
        break;

      case DIRECTLY_ADD:
        if (value == null) {
          unsetDirectlyAdd();
        } else {
          setDirectlyAdd((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      case USER_ID:
        return getUserId();

      case TITLE_CODE:
        return getTitleCode();

      case NICKNAME:
        return getNickname();

      case RE_RELATION_CODE:
        return getReRelationCode();

      case DIRECTLY_ADD:
        return Boolean.valueOf(isDirectlyAdd());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      case USER_ID:
        return isSetUserId();
      case TITLE_CODE:
        return isSetTitleCode();
      case NICKNAME:
        return isSetNickname();
      case RE_RELATION_CODE:
        return isSetReRelationCode();
      case DIRECTLY_ADD:
        return isSetDirectlyAdd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFamilyMember_args)
        return this.equals((addFamilyMember_args)that);
      return false;
    }

    public boolean equals(addFamilyMember_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_titleCode = true && this.isSetTitleCode();
      boolean that_present_titleCode = true && that.isSetTitleCode();
      if (this_present_titleCode || that_present_titleCode) {
        if (!(this_present_titleCode && that_present_titleCode))
          return false;
        if (!this.titleCode.equals(that.titleCode))
          return false;
      }

      boolean this_present_nickname = true && this.isSetNickname();
      boolean that_present_nickname = true && that.isSetNickname();
      if (this_present_nickname || that_present_nickname) {
        if (!(this_present_nickname && that_present_nickname))
          return false;
        if (!this.nickname.equals(that.nickname))
          return false;
      }

      boolean this_present_reRelationCode = true && this.isSetReRelationCode();
      boolean that_present_reRelationCode = true && that.isSetReRelationCode();
      if (this_present_reRelationCode || that_present_reRelationCode) {
        if (!(this_present_reRelationCode && that_present_reRelationCode))
          return false;
        if (!this.reRelationCode.equals(that.reRelationCode))
          return false;
      }

      boolean this_present_directlyAdd = true;
      boolean that_present_directlyAdd = true;
      if (this_present_directlyAdd || that_present_directlyAdd) {
        if (!(this_present_directlyAdd && that_present_directlyAdd))
          return false;
        if (this.directlyAdd != that.directlyAdd)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addFamilyMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addFamilyMember_args typedOther = (addFamilyMember_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitleCode()).compareTo(typedOther.isSetTitleCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitleCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleCode, typedOther.titleCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNickname()).compareTo(typedOther.isSetNickname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNickname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, typedOther.nickname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReRelationCode()).compareTo(typedOther.isSetReRelationCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReRelationCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reRelationCode, typedOther.reRelationCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirectlyAdd()).compareTo(typedOther.isSetDirectlyAdd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirectlyAdd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directlyAdd, typedOther.directlyAdd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFamilyMember_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("titleCode:");
      if (this.titleCode == null) {
        sb.append("null");
      } else {
        sb.append(this.titleCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reRelationCode:");
      if (this.reRelationCode == null) {
        sb.append("null");
      } else {
        sb.append(this.reRelationCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("directlyAdd:");
      sb.append(this.directlyAdd);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFamilyMember_argsStandardSchemeFactory implements SchemeFactory {
      public addFamilyMember_argsStandardScheme getScheme() {
        return new addFamilyMember_argsStandardScheme();
      }
    }

    private static class addFamilyMember_argsStandardScheme extends StandardScheme<addFamilyMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFamilyMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TITLE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.titleCode = iprot.readString();
                struct.setTitleCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NICKNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nickname = iprot.readString();
                struct.setNicknameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RE_RELATION_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reRelationCode = Gender.findByValue(iprot.readI32());
                struct.setReRelationCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DIRECTLY_ADD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.directlyAdd = iprot.readBool();
                struct.setDirectlyAddIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFamilyMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.titleCode != null) {
          oprot.writeFieldBegin(TITLE_CODE_FIELD_DESC);
          oprot.writeString(struct.titleCode);
          oprot.writeFieldEnd();
        }
        if (struct.nickname != null) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
        if (struct.reRelationCode != null) {
          oprot.writeFieldBegin(RE_RELATION_CODE_FIELD_DESC);
          oprot.writeI32(struct.reRelationCode.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DIRECTLY_ADD_FIELD_DESC);
        oprot.writeBool(struct.directlyAdd);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFamilyMember_argsTupleSchemeFactory implements SchemeFactory {
      public addFamilyMember_argsTupleScheme getScheme() {
        return new addFamilyMember_argsTupleScheme();
      }
    }

    private static class addFamilyMember_argsTupleScheme extends TupleScheme<addFamilyMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFamilyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetTitleCode()) {
          optionals.set(2);
        }
        if (struct.isSetNickname()) {
          optionals.set(3);
        }
        if (struct.isSetReRelationCode()) {
          optionals.set(4);
        }
        if (struct.isSetDirectlyAdd()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetTitleCode()) {
          oprot.writeString(struct.titleCode);
        }
        if (struct.isSetNickname()) {
          oprot.writeString(struct.nickname);
        }
        if (struct.isSetReRelationCode()) {
          oprot.writeI32(struct.reRelationCode.getValue());
        }
        if (struct.isSetDirectlyAdd()) {
          oprot.writeBool(struct.directlyAdd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFamilyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.titleCode = iprot.readString();
          struct.setTitleCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nickname = iprot.readString();
          struct.setNicknameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reRelationCode = Gender.findByValue(iprot.readI32());
          struct.setReRelationCodeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.directlyAdd = iprot.readBool();
          struct.setDirectlyAddIsSet(true);
        }
      }
    }

  }

  public static class addFamilyMember_result implements org.apache.thrift.TBase<addFamilyMember_result, addFamilyMember_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFamilyMember_result");

    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFamilyMember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFamilyMember_resultTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFamilyMember_result.class, metaDataMap);
    }

    public addFamilyMember_result() {
    }

    public addFamilyMember_result(
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFamilyMember_result(addFamilyMember_result other) {
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public addFamilyMember_result deepCopy() {
      return new addFamilyMember_result(this);
    }

    @Override
    public void clear() {
      this.ae = null;
      this.be = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public addFamilyMember_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public addFamilyMember_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFamilyMember_result)
        return this.equals((addFamilyMember_result)that);
      return false;
    }

    public boolean equals(addFamilyMember_result that) {
      if (that == null)
        return false;

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addFamilyMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addFamilyMember_result typedOther = (addFamilyMember_result)other;

      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFamilyMember_result(");
      boolean first = true;

      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFamilyMember_resultStandardSchemeFactory implements SchemeFactory {
      public addFamilyMember_resultStandardScheme getScheme() {
        return new addFamilyMember_resultStandardScheme();
      }
    }

    private static class addFamilyMember_resultStandardScheme extends StandardScheme<addFamilyMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFamilyMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFamilyMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFamilyMember_resultTupleSchemeFactory implements SchemeFactory {
      public addFamilyMember_resultTupleScheme getScheme() {
        return new addFamilyMember_resultTupleScheme();
      }
    }

    private static class addFamilyMember_resultTupleScheme extends TupleScheme<addFamilyMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFamilyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAe()) {
          optionals.set(0);
        }
        if (struct.isSetBe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFamilyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

  public static class updateFamilyMember_args implements org.apache.thrift.TBase<updateFamilyMember_args, updateFamilyMember_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFamilyMember_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFamilyMember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFamilyMember_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required
    public String userId; // required
    public String nickname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs"),
      USER_ID((short)2, "userId"),
      NICKNAME((short)3, "nickname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          case 2: // USER_ID
            return USER_ID;
          case 3: // NICKNAME
            return NICKNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFamilyMember_args.class, metaDataMap);
    }

    public updateFamilyMember_args() {
    }

    public updateFamilyMember_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs,
      String userId,
      String nickname)
    {
      this();
      this.commArgs = commArgs;
      this.userId = userId;
      this.nickname = nickname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFamilyMember_args(updateFamilyMember_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetNickname()) {
        this.nickname = other.nickname;
      }
    }

    public updateFamilyMember_args deepCopy() {
      return new updateFamilyMember_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
      this.userId = null;
      this.nickname = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public updateFamilyMember_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public updateFamilyMember_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getNickname() {
      return this.nickname;
    }

    public updateFamilyMember_args setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    public void unsetNickname() {
      this.nickname = null;
    }

    /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
    public boolean isSetNickname() {
      return this.nickname != null;
    }

    public void setNicknameIsSet(boolean value) {
      if (!value) {
        this.nickname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case NICKNAME:
        if (value == null) {
          unsetNickname();
        } else {
          setNickname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      case USER_ID:
        return getUserId();

      case NICKNAME:
        return getNickname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      case USER_ID:
        return isSetUserId();
      case NICKNAME:
        return isSetNickname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFamilyMember_args)
        return this.equals((updateFamilyMember_args)that);
      return false;
    }

    public boolean equals(updateFamilyMember_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_nickname = true && this.isSetNickname();
      boolean that_present_nickname = true && that.isSetNickname();
      if (this_present_nickname || that_present_nickname) {
        if (!(this_present_nickname && that_present_nickname))
          return false;
        if (!this.nickname.equals(that.nickname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFamilyMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFamilyMember_args typedOther = (updateFamilyMember_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNickname()).compareTo(typedOther.isSetNickname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNickname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, typedOther.nickname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFamilyMember_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFamilyMember_argsStandardSchemeFactory implements SchemeFactory {
      public updateFamilyMember_argsStandardScheme getScheme() {
        return new updateFamilyMember_argsStandardScheme();
      }
    }

    private static class updateFamilyMember_argsStandardScheme extends StandardScheme<updateFamilyMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFamilyMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NICKNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nickname = iprot.readString();
                struct.setNicknameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFamilyMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.nickname != null) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFamilyMember_argsTupleSchemeFactory implements SchemeFactory {
      public updateFamilyMember_argsTupleScheme getScheme() {
        return new updateFamilyMember_argsTupleScheme();
      }
    }

    private static class updateFamilyMember_argsTupleScheme extends TupleScheme<updateFamilyMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFamilyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetNickname()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetNickname()) {
          oprot.writeString(struct.nickname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFamilyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nickname = iprot.readString();
          struct.setNicknameIsSet(true);
        }
      }
    }

  }

  public static class updateFamilyMember_result implements org.apache.thrift.TBase<updateFamilyMember_result, updateFamilyMember_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFamilyMember_result");

    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFamilyMember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFamilyMember_resultTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFamilyMember_result.class, metaDataMap);
    }

    public updateFamilyMember_result() {
    }

    public updateFamilyMember_result(
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFamilyMember_result(updateFamilyMember_result other) {
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public updateFamilyMember_result deepCopy() {
      return new updateFamilyMember_result(this);
    }

    @Override
    public void clear() {
      this.ae = null;
      this.be = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public updateFamilyMember_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public updateFamilyMember_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFamilyMember_result)
        return this.equals((updateFamilyMember_result)that);
      return false;
    }

    public boolean equals(updateFamilyMember_result that) {
      if (that == null)
        return false;

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFamilyMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFamilyMember_result typedOther = (updateFamilyMember_result)other;

      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFamilyMember_result(");
      boolean first = true;

      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFamilyMember_resultStandardSchemeFactory implements SchemeFactory {
      public updateFamilyMember_resultStandardScheme getScheme() {
        return new updateFamilyMember_resultStandardScheme();
      }
    }

    private static class updateFamilyMember_resultStandardScheme extends StandardScheme<updateFamilyMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFamilyMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFamilyMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFamilyMember_resultTupleSchemeFactory implements SchemeFactory {
      public updateFamilyMember_resultTupleScheme getScheme() {
        return new updateFamilyMember_resultTupleScheme();
      }
    }

    private static class updateFamilyMember_resultTupleScheme extends TupleScheme<updateFamilyMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFamilyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAe()) {
          optionals.set(0);
        }
        if (struct.isSetBe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFamilyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

  public static class deleteFamilyMember_args implements org.apache.thrift.TBase<deleteFamilyMember_args, deleteFamilyMember_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFamilyMember_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFamilyMember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFamilyMember_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required
    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFamilyMember_args.class, metaDataMap);
    }

    public deleteFamilyMember_args() {
    }

    public deleteFamilyMember_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs,
      String userId)
    {
      this();
      this.commArgs = commArgs;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFamilyMember_args(deleteFamilyMember_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public deleteFamilyMember_args deepCopy() {
      return new deleteFamilyMember_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
      this.userId = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public deleteFamilyMember_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public deleteFamilyMember_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFamilyMember_args)
        return this.equals((deleteFamilyMember_args)that);
      return false;
    }

    public boolean equals(deleteFamilyMember_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteFamilyMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteFamilyMember_args typedOther = (deleteFamilyMember_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFamilyMember_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFamilyMember_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFamilyMember_argsStandardScheme getScheme() {
        return new deleteFamilyMember_argsStandardScheme();
      }
    }

    private static class deleteFamilyMember_argsStandardScheme extends StandardScheme<deleteFamilyMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFamilyMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFamilyMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFamilyMember_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFamilyMember_argsTupleScheme getScheme() {
        return new deleteFamilyMember_argsTupleScheme();
      }
    }

    private static class deleteFamilyMember_argsTupleScheme extends TupleScheme<deleteFamilyMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFamilyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFamilyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class deleteFamilyMember_result implements org.apache.thrift.TBase<deleteFamilyMember_result, deleteFamilyMember_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFamilyMember_result");

    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFamilyMember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFamilyMember_resultTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFamilyMember_result.class, metaDataMap);
    }

    public deleteFamilyMember_result() {
    }

    public deleteFamilyMember_result(
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFamilyMember_result(deleteFamilyMember_result other) {
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public deleteFamilyMember_result deepCopy() {
      return new deleteFamilyMember_result(this);
    }

    @Override
    public void clear() {
      this.ae = null;
      this.be = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public deleteFamilyMember_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public deleteFamilyMember_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFamilyMember_result)
        return this.equals((deleteFamilyMember_result)that);
      return false;
    }

    public boolean equals(deleteFamilyMember_result that) {
      if (that == null)
        return false;

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteFamilyMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteFamilyMember_result typedOther = (deleteFamilyMember_result)other;

      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFamilyMember_result(");
      boolean first = true;

      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFamilyMember_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFamilyMember_resultStandardScheme getScheme() {
        return new deleteFamilyMember_resultStandardScheme();
      }
    }

    private static class deleteFamilyMember_resultStandardScheme extends StandardScheme<deleteFamilyMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFamilyMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFamilyMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFamilyMember_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFamilyMember_resultTupleScheme getScheme() {
        return new deleteFamilyMember_resultTupleScheme();
      }
    }

    private static class deleteFamilyMember_resultTupleScheme extends TupleScheme<deleteFamilyMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFamilyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAe()) {
          optionals.set(0);
        }
        if (struct.isSetBe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFamilyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

  public static class getNoteMessage_args implements org.apache.thrift.TBase<getNoteMessage_args, getNoteMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNoteMessage_args");

    private static final org.apache.thrift.protocol.TField COMM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("commArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNoteMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNoteMessage_argsTupleSchemeFactory());
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMM_ARGS((short)1, "commArgs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMM_ARGS
            return COMM_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("commArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xikang.channel.common.rpc.thrift.message.CommArgs.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNoteMessage_args.class, metaDataMap);
    }

    public getNoteMessage_args() {
    }

    public getNoteMessage_args(
      com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs)
    {
      this();
      this.commArgs = commArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteMessage_args(getNoteMessage_args other) {
      if (other.isSetCommArgs()) {
        this.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs(other.commArgs);
      }
    }

    public getNoteMessage_args deepCopy() {
      return new getNoteMessage_args(this);
    }

    @Override
    public void clear() {
      this.commArgs = null;
    }

    public com.xikang.channel.common.rpc.thrift.message.CommArgs getCommArgs() {
      return this.commArgs;
    }

    public getNoteMessage_args setCommArgs(com.xikang.channel.common.rpc.thrift.message.CommArgs commArgs) {
      this.commArgs = commArgs;
      return this;
    }

    public void unsetCommArgs() {
      this.commArgs = null;
    }

    /** Returns true if field commArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommArgs() {
      return this.commArgs != null;
    }

    public void setCommArgsIsSet(boolean value) {
      if (!value) {
        this.commArgs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMM_ARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          setCommArgs((com.xikang.channel.common.rpc.thrift.message.CommArgs)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMM_ARGS:
        return getCommArgs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMM_ARGS:
        return isSetCommArgs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteMessage_args)
        return this.equals((getNoteMessage_args)that);
      return false;
    }

    public boolean equals(getNoteMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_commArgs = true && this.isSetCommArgs();
      boolean that_present_commArgs = true && that.isSetCommArgs();
      if (this_present_commArgs || that_present_commArgs) {
        if (!(this_present_commArgs && that_present_commArgs))
          return false;
        if (!this.commArgs.equals(that.commArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteMessage_args typedOther = (getNoteMessage_args)other;

      lastComparison = Boolean.valueOf(isSetCommArgs()).compareTo(typedOther.isSetCommArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commArgs, typedOther.commArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteMessage_args(");
      boolean first = true;

      sb.append("commArgs:");
      if (this.commArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.commArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNoteMessage_argsStandardSchemeFactory implements SchemeFactory {
      public getNoteMessage_argsStandardScheme getScheme() {
        return new getNoteMessage_argsStandardScheme();
      }
    }

    private static class getNoteMessage_argsStandardScheme extends StandardScheme<getNoteMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNoteMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
                struct.commArgs.read(iprot);
                struct.setCommArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNoteMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commArgs != null) {
          oprot.writeFieldBegin(COMM_ARGS_FIELD_DESC);
          struct.commArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNoteMessage_argsTupleSchemeFactory implements SchemeFactory {
      public getNoteMessage_argsTupleScheme getScheme() {
        return new getNoteMessage_argsTupleScheme();
      }
    }

    private static class getNoteMessage_argsTupleScheme extends TupleScheme<getNoteMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNoteMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommArgs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommArgs()) {
          struct.commArgs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNoteMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commArgs = new com.xikang.channel.common.rpc.thrift.message.CommArgs();
          struct.commArgs.read(iprot);
          struct.setCommArgsIsSet(true);
        }
      }
    }

  }

  public static class getNoteMessage_result implements org.apache.thrift.TBase<getNoteMessage_result, getNoteMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNoteMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BE_FIELD_DESC = new org.apache.thrift.protocol.TField("be", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNoteMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNoteMessage_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.xikang.channel.common.rpc.thrift.message.AuthException ae; // required
    public com.xikang.channel.common.rpc.thrift.message.BizException be; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AE((short)1, "ae"),
      BE((short)2, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AE
            return AE;
          case 2: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BE, new org.apache.thrift.meta_data.FieldMetaData("be", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNoteMessage_result.class, metaDataMap);
    }

    public getNoteMessage_result() {
    }

    public getNoteMessage_result(
      String success,
      com.xikang.channel.common.rpc.thrift.message.AuthException ae,
      com.xikang.channel.common.rpc.thrift.message.BizException be)
    {
      this();
      this.success = success;
      this.ae = ae;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteMessage_result(getNoteMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAe()) {
        this.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException(other.ae);
      }
      if (other.isSetBe()) {
        this.be = new com.xikang.channel.common.rpc.thrift.message.BizException(other.be);
      }
    }

    public getNoteMessage_result deepCopy() {
      return new getNoteMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ae = null;
      this.be = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getNoteMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.AuthException getAe() {
      return this.ae;
    }

    public getNoteMessage_result setAe(com.xikang.channel.common.rpc.thrift.message.AuthException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public com.xikang.channel.common.rpc.thrift.message.BizException getBe() {
      return this.be;
    }

    public getNoteMessage_result setBe(com.xikang.channel.common.rpc.thrift.message.BizException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been assigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((com.xikang.channel.common.rpc.thrift.message.AuthException)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((com.xikang.channel.common.rpc.thrift.message.BizException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AE:
        return getAe();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteMessage_result)
        return this.equals((getNoteMessage_result)that);
      return false;
    }

    public boolean equals(getNoteMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteMessage_result typedOther = (getNoteMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNoteMessage_resultStandardSchemeFactory implements SchemeFactory {
      public getNoteMessage_resultStandardScheme getScheme() {
        return new getNoteMessage_resultStandardScheme();
      }
    }

    private static class getNoteMessage_resultStandardScheme extends StandardScheme<getNoteMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNoteMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
                struct.be.read(iprot);
                struct.setBeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNoteMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.be != null) {
          oprot.writeFieldBegin(BE_FIELD_DESC);
          struct.be.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNoteMessage_resultTupleSchemeFactory implements SchemeFactory {
      public getNoteMessage_resultTupleScheme getScheme() {
        return new getNoteMessage_resultTupleScheme();
      }
    }

    private static class getNoteMessage_resultTupleScheme extends TupleScheme<getNoteMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNoteMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAe()) {
          optionals.set(1);
        }
        if (struct.isSetBe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
        if (struct.isSetBe()) {
          struct.be.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNoteMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ae = new com.xikang.channel.common.rpc.thrift.message.AuthException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.be = new com.xikang.channel.common.rpc.thrift.message.BizException();
          struct.be.read(iprot);
          struct.setBeIsSet(true);
        }
      }
    }

  }

}
