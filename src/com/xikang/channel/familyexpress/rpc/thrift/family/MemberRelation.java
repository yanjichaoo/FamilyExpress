/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.familyexpress.rpc.thrift.family;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MemberRelation implements org.apache.thrift.TBase<MemberRelation, MemberRelation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MemberRelation");

  private static final org.apache.thrift.protocol.TField RELATIVE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("relativeCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("titleCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RE_TITLE_CODE_M_FIELD_DESC = new org.apache.thrift.protocol.TField("reTitleCodeM", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RE_TITLE_CODE_W_FIELD_DESC = new org.apache.thrift.protocol.TField("reTitleCodeW", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MemberRelationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MemberRelationTupleSchemeFactory());
  }

  /**
   * 
   * @see RelativeCode
   */
  public RelativeCode relativeCode; // required
  public String titleCode; // required
  public String title; // required
  public String reTitleCodeM; // required
  public String reTitleCodeW; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RelativeCode
     */
    RELATIVE_CODE((short)1, "relativeCode"),
    TITLE_CODE((short)2, "titleCode"),
    TITLE((short)3, "title"),
    RE_TITLE_CODE_M((short)4, "reTitleCodeM"),
    RE_TITLE_CODE_W((short)5, "reTitleCodeW");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATIVE_CODE
          return RELATIVE_CODE;
        case 2: // TITLE_CODE
          return TITLE_CODE;
        case 3: // TITLE
          return TITLE;
        case 4: // RE_TITLE_CODE_M
          return RE_TITLE_CODE_M;
        case 5: // RE_TITLE_CODE_W
          return RE_TITLE_CODE_W;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATIVE_CODE, new org.apache.thrift.meta_data.FieldMetaData("relativeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RelativeCode.class)));
    tmpMap.put(_Fields.TITLE_CODE, new org.apache.thrift.meta_data.FieldMetaData("titleCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE_TITLE_CODE_M, new org.apache.thrift.meta_data.FieldMetaData("reTitleCodeM", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE_TITLE_CODE_W, new org.apache.thrift.meta_data.FieldMetaData("reTitleCodeW", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MemberRelation.class, metaDataMap);
  }

  public MemberRelation() {
  }

  public MemberRelation(
    RelativeCode relativeCode,
    String titleCode,
    String title,
    String reTitleCodeM,
    String reTitleCodeW)
  {
    this();
    this.relativeCode = relativeCode;
    this.titleCode = titleCode;
    this.title = title;
    this.reTitleCodeM = reTitleCodeM;
    this.reTitleCodeW = reTitleCodeW;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MemberRelation(MemberRelation other) {
    if (other.isSetRelativeCode()) {
      this.relativeCode = other.relativeCode;
    }
    if (other.isSetTitleCode()) {
      this.titleCode = other.titleCode;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetReTitleCodeM()) {
      this.reTitleCodeM = other.reTitleCodeM;
    }
    if (other.isSetReTitleCodeW()) {
      this.reTitleCodeW = other.reTitleCodeW;
    }
  }

  public MemberRelation deepCopy() {
    return new MemberRelation(this);
  }

  @Override
  public void clear() {
    this.relativeCode = null;
    this.titleCode = null;
    this.title = null;
    this.reTitleCodeM = null;
    this.reTitleCodeW = null;
  }

  /**
   * 
   * @see RelativeCode
   */
  public RelativeCode getRelativeCode() {
    return this.relativeCode;
  }

  /**
   * 
   * @see RelativeCode
   */
  public MemberRelation setRelativeCode(RelativeCode relativeCode) {
    this.relativeCode = relativeCode;
    return this;
  }

  public void unsetRelativeCode() {
    this.relativeCode = null;
  }

  /** Returns true if field relativeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRelativeCode() {
    return this.relativeCode != null;
  }

  public void setRelativeCodeIsSet(boolean value) {
    if (!value) {
      this.relativeCode = null;
    }
  }

  public String getTitleCode() {
    return this.titleCode;
  }

  public MemberRelation setTitleCode(String titleCode) {
    this.titleCode = titleCode;
    return this;
  }

  public void unsetTitleCode() {
    this.titleCode = null;
  }

  /** Returns true if field titleCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleCode() {
    return this.titleCode != null;
  }

  public void setTitleCodeIsSet(boolean value) {
    if (!value) {
      this.titleCode = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public MemberRelation setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getReTitleCodeM() {
    return this.reTitleCodeM;
  }

  public MemberRelation setReTitleCodeM(String reTitleCodeM) {
    this.reTitleCodeM = reTitleCodeM;
    return this;
  }

  public void unsetReTitleCodeM() {
    this.reTitleCodeM = null;
  }

  /** Returns true if field reTitleCodeM is set (has been assigned a value) and false otherwise */
  public boolean isSetReTitleCodeM() {
    return this.reTitleCodeM != null;
  }

  public void setReTitleCodeMIsSet(boolean value) {
    if (!value) {
      this.reTitleCodeM = null;
    }
  }

  public String getReTitleCodeW() {
    return this.reTitleCodeW;
  }

  public MemberRelation setReTitleCodeW(String reTitleCodeW) {
    this.reTitleCodeW = reTitleCodeW;
    return this;
  }

  public void unsetReTitleCodeW() {
    this.reTitleCodeW = null;
  }

  /** Returns true if field reTitleCodeW is set (has been assigned a value) and false otherwise */
  public boolean isSetReTitleCodeW() {
    return this.reTitleCodeW != null;
  }

  public void setReTitleCodeWIsSet(boolean value) {
    if (!value) {
      this.reTitleCodeW = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATIVE_CODE:
      if (value == null) {
        unsetRelativeCode();
      } else {
        setRelativeCode((RelativeCode)value);
      }
      break;

    case TITLE_CODE:
      if (value == null) {
        unsetTitleCode();
      } else {
        setTitleCode((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case RE_TITLE_CODE_M:
      if (value == null) {
        unsetReTitleCodeM();
      } else {
        setReTitleCodeM((String)value);
      }
      break;

    case RE_TITLE_CODE_W:
      if (value == null) {
        unsetReTitleCodeW();
      } else {
        setReTitleCodeW((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATIVE_CODE:
      return getRelativeCode();

    case TITLE_CODE:
      return getTitleCode();

    case TITLE:
      return getTitle();

    case RE_TITLE_CODE_M:
      return getReTitleCodeM();

    case RE_TITLE_CODE_W:
      return getReTitleCodeW();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATIVE_CODE:
      return isSetRelativeCode();
    case TITLE_CODE:
      return isSetTitleCode();
    case TITLE:
      return isSetTitle();
    case RE_TITLE_CODE_M:
      return isSetReTitleCodeM();
    case RE_TITLE_CODE_W:
      return isSetReTitleCodeW();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MemberRelation)
      return this.equals((MemberRelation)that);
    return false;
  }

  public boolean equals(MemberRelation that) {
    if (that == null)
      return false;

    boolean this_present_relativeCode = true && this.isSetRelativeCode();
    boolean that_present_relativeCode = true && that.isSetRelativeCode();
    if (this_present_relativeCode || that_present_relativeCode) {
      if (!(this_present_relativeCode && that_present_relativeCode))
        return false;
      if (!this.relativeCode.equals(that.relativeCode))
        return false;
    }

    boolean this_present_titleCode = true && this.isSetTitleCode();
    boolean that_present_titleCode = true && that.isSetTitleCode();
    if (this_present_titleCode || that_present_titleCode) {
      if (!(this_present_titleCode && that_present_titleCode))
        return false;
      if (!this.titleCode.equals(that.titleCode))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_reTitleCodeM = true && this.isSetReTitleCodeM();
    boolean that_present_reTitleCodeM = true && that.isSetReTitleCodeM();
    if (this_present_reTitleCodeM || that_present_reTitleCodeM) {
      if (!(this_present_reTitleCodeM && that_present_reTitleCodeM))
        return false;
      if (!this.reTitleCodeM.equals(that.reTitleCodeM))
        return false;
    }

    boolean this_present_reTitleCodeW = true && this.isSetReTitleCodeW();
    boolean that_present_reTitleCodeW = true && that.isSetReTitleCodeW();
    if (this_present_reTitleCodeW || that_present_reTitleCodeW) {
      if (!(this_present_reTitleCodeW && that_present_reTitleCodeW))
        return false;
      if (!this.reTitleCodeW.equals(that.reTitleCodeW))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MemberRelation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MemberRelation typedOther = (MemberRelation)other;

    lastComparison = Boolean.valueOf(isSetRelativeCode()).compareTo(typedOther.isSetRelativeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelativeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relativeCode, typedOther.relativeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleCode()).compareTo(typedOther.isSetTitleCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleCode, typedOther.titleCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReTitleCodeM()).compareTo(typedOther.isSetReTitleCodeM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReTitleCodeM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reTitleCodeM, typedOther.reTitleCodeM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReTitleCodeW()).compareTo(typedOther.isSetReTitleCodeW());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReTitleCodeW()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reTitleCodeW, typedOther.reTitleCodeW);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MemberRelation(");
    boolean first = true;

    sb.append("relativeCode:");
    if (this.relativeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.relativeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("titleCode:");
    if (this.titleCode == null) {
      sb.append("null");
    } else {
      sb.append(this.titleCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reTitleCodeM:");
    if (this.reTitleCodeM == null) {
      sb.append("null");
    } else {
      sb.append(this.reTitleCodeM);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reTitleCodeW:");
    if (this.reTitleCodeW == null) {
      sb.append("null");
    } else {
      sb.append(this.reTitleCodeW);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MemberRelationStandardSchemeFactory implements SchemeFactory {
    public MemberRelationStandardScheme getScheme() {
      return new MemberRelationStandardScheme();
    }
  }

  private static class MemberRelationStandardScheme extends StandardScheme<MemberRelation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MemberRelation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATIVE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relativeCode = RelativeCode.findByValue(iprot.readI32());
              struct.setRelativeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titleCode = iprot.readString();
              struct.setTitleCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RE_TITLE_CODE_M
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reTitleCodeM = iprot.readString();
              struct.setReTitleCodeMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RE_TITLE_CODE_W
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reTitleCodeW = iprot.readString();
              struct.setReTitleCodeWIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MemberRelation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.relativeCode != null) {
        oprot.writeFieldBegin(RELATIVE_CODE_FIELD_DESC);
        oprot.writeI32(struct.relativeCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.titleCode != null) {
        oprot.writeFieldBegin(TITLE_CODE_FIELD_DESC);
        oprot.writeString(struct.titleCode);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.reTitleCodeM != null) {
        oprot.writeFieldBegin(RE_TITLE_CODE_M_FIELD_DESC);
        oprot.writeString(struct.reTitleCodeM);
        oprot.writeFieldEnd();
      }
      if (struct.reTitleCodeW != null) {
        oprot.writeFieldBegin(RE_TITLE_CODE_W_FIELD_DESC);
        oprot.writeString(struct.reTitleCodeW);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MemberRelationTupleSchemeFactory implements SchemeFactory {
    public MemberRelationTupleScheme getScheme() {
      return new MemberRelationTupleScheme();
    }
  }

  private static class MemberRelationTupleScheme extends TupleScheme<MemberRelation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MemberRelation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRelativeCode()) {
        optionals.set(0);
      }
      if (struct.isSetTitleCode()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetReTitleCodeM()) {
        optionals.set(3);
      }
      if (struct.isSetReTitleCodeW()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRelativeCode()) {
        oprot.writeI32(struct.relativeCode.getValue());
      }
      if (struct.isSetTitleCode()) {
        oprot.writeString(struct.titleCode);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetReTitleCodeM()) {
        oprot.writeString(struct.reTitleCodeM);
      }
      if (struct.isSetReTitleCodeW()) {
        oprot.writeString(struct.reTitleCodeW);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MemberRelation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.relativeCode = RelativeCode.findByValue(iprot.readI32());
        struct.setRelativeCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.titleCode = iprot.readString();
        struct.setTitleCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reTitleCodeM = iprot.readString();
        struct.setReTitleCodeMIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reTitleCodeW = iprot.readString();
        struct.setReTitleCodeWIsSet(true);
      }
    }
  }

}

