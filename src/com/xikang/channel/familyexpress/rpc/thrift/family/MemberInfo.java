/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.familyexpress.rpc.thrift.family;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MemberInfo implements org.apache.thrift.TBase<MemberInfo, MemberInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MemberInfo");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NIKE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nikeName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("relation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UN_READ_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("unReadNum", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSendTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastContentType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_EXPRESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastExpressType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_TEXT_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTextContent", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ALLOW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("allowStatus", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FIGURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("figureUrl", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MemberInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MemberInfoTupleSchemeFactory());
  }

  public String userId; // required
  public String userName; // required
  public String nikeName; // required
  public String relation; // required
  public short unReadNum; // required
  public String lastSendTime; // required
  /**
   * 
   * @see com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType
   */
  public com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType lastContentType; // required
  /**
   * 
   * @see com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType
   */
  public com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType lastExpressType; // required
  public String lastTextContent; // required
  /**
   * 
   * @see AllowStatus
   */
  public AllowStatus allowStatus; // required
  public String figureUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_NAME((short)2, "userName"),
    NIKE_NAME((short)3, "nikeName"),
    RELATION((short)4, "relation"),
    UN_READ_NUM((short)5, "unReadNum"),
    LAST_SEND_TIME((short)6, "lastSendTime"),
    /**
     * 
     * @see com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType
     */
    LAST_CONTENT_TYPE((short)7, "lastContentType"),
    /**
     * 
     * @see com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType
     */
    LAST_EXPRESS_TYPE((short)8, "lastExpressType"),
    LAST_TEXT_CONTENT((short)9, "lastTextContent"),
    /**
     * 
     * @see AllowStatus
     */
    ALLOW_STATUS((short)10, "allowStatus"),
    FIGURE_URL((short)11, "figureUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // NIKE_NAME
          return NIKE_NAME;
        case 4: // RELATION
          return RELATION;
        case 5: // UN_READ_NUM
          return UN_READ_NUM;
        case 6: // LAST_SEND_TIME
          return LAST_SEND_TIME;
        case 7: // LAST_CONTENT_TYPE
          return LAST_CONTENT_TYPE;
        case 8: // LAST_EXPRESS_TYPE
          return LAST_EXPRESS_TYPE;
        case 9: // LAST_TEXT_CONTENT
          return LAST_TEXT_CONTENT;
        case 10: // ALLOW_STATUS
          return ALLOW_STATUS;
        case 11: // FIGURE_URL
          return FIGURE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UNREADNUM_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NIKE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nikeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATION, new org.apache.thrift.meta_data.FieldMetaData("relation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UN_READ_NUM, new org.apache.thrift.meta_data.FieldMetaData("unReadNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LAST_SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastSendTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lastContentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType.class)));
    tmpMap.put(_Fields.LAST_EXPRESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lastExpressType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType.class)));
    tmpMap.put(_Fields.LAST_TEXT_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("lastTextContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("allowStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AllowStatus.class)));
    tmpMap.put(_Fields.FIGURE_URL, new org.apache.thrift.meta_data.FieldMetaData("figureUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MemberInfo.class, metaDataMap);
  }

  public MemberInfo() {
  }

  public MemberInfo(
    String userId,
    String userName,
    String nikeName,
    String relation,
    short unReadNum,
    String lastSendTime,
    com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType lastContentType,
    com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType lastExpressType,
    String lastTextContent,
    AllowStatus allowStatus,
    String figureUrl)
  {
    this();
    this.userId = userId;
    this.userName = userName;
    this.nikeName = nikeName;
    this.relation = relation;
    this.unReadNum = unReadNum;
    setUnReadNumIsSet(true);
    this.lastSendTime = lastSendTime;
    this.lastContentType = lastContentType;
    this.lastExpressType = lastExpressType;
    this.lastTextContent = lastTextContent;
    this.allowStatus = allowStatus;
    this.figureUrl = figureUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MemberInfo(MemberInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetNikeName()) {
      this.nikeName = other.nikeName;
    }
    if (other.isSetRelation()) {
      this.relation = other.relation;
    }
    this.unReadNum = other.unReadNum;
    if (other.isSetLastSendTime()) {
      this.lastSendTime = other.lastSendTime;
    }
    if (other.isSetLastContentType()) {
      this.lastContentType = other.lastContentType;
    }
    if (other.isSetLastExpressType()) {
      this.lastExpressType = other.lastExpressType;
    }
    if (other.isSetLastTextContent()) {
      this.lastTextContent = other.lastTextContent;
    }
    if (other.isSetAllowStatus()) {
      this.allowStatus = other.allowStatus;
    }
    if (other.isSetFigureUrl()) {
      this.figureUrl = other.figureUrl;
    }
  }

  public MemberInfo deepCopy() {
    return new MemberInfo(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.userName = null;
    this.nikeName = null;
    this.relation = null;
    setUnReadNumIsSet(false);
    this.unReadNum = 0;
    this.lastSendTime = null;
    this.lastContentType = null;
    this.lastExpressType = null;
    this.lastTextContent = null;
    this.allowStatus = null;
    this.figureUrl = null;
  }

  public String getUserId() {
    return this.userId;
  }

  public MemberInfo setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public MemberInfo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getNikeName() {
    return this.nikeName;
  }

  public MemberInfo setNikeName(String nikeName) {
    this.nikeName = nikeName;
    return this;
  }

  public void unsetNikeName() {
    this.nikeName = null;
  }

  /** Returns true if field nikeName is set (has been assigned a value) and false otherwise */
  public boolean isSetNikeName() {
    return this.nikeName != null;
  }

  public void setNikeNameIsSet(boolean value) {
    if (!value) {
      this.nikeName = null;
    }
  }

  public String getRelation() {
    return this.relation;
  }

  public MemberInfo setRelation(String relation) {
    this.relation = relation;
    return this;
  }

  public void unsetRelation() {
    this.relation = null;
  }

  /** Returns true if field relation is set (has been assigned a value) and false otherwise */
  public boolean isSetRelation() {
    return this.relation != null;
  }

  public void setRelationIsSet(boolean value) {
    if (!value) {
      this.relation = null;
    }
  }

  public short getUnReadNum() {
    return this.unReadNum;
  }

  public MemberInfo setUnReadNum(short unReadNum) {
    this.unReadNum = unReadNum;
    setUnReadNumIsSet(true);
    return this;
  }

  public void unsetUnReadNum() {
    __isset_bit_vector.clear(__UNREADNUM_ISSET_ID);
  }

  /** Returns true if field unReadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReadNum() {
    return __isset_bit_vector.get(__UNREADNUM_ISSET_ID);
  }

  public void setUnReadNumIsSet(boolean value) {
    __isset_bit_vector.set(__UNREADNUM_ISSET_ID, value);
  }

  public String getLastSendTime() {
    return this.lastSendTime;
  }

  public MemberInfo setLastSendTime(String lastSendTime) {
    this.lastSendTime = lastSendTime;
    return this;
  }

  public void unsetLastSendTime() {
    this.lastSendTime = null;
  }

  /** Returns true if field lastSendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastSendTime() {
    return this.lastSendTime != null;
  }

  public void setLastSendTimeIsSet(boolean value) {
    if (!value) {
      this.lastSendTime = null;
    }
  }

  /**
   * 
   * @see com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType
   */
  public com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType getLastContentType() {
    return this.lastContentType;
  }

  /**
   * 
   * @see com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType
   */
  public MemberInfo setLastContentType(com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType lastContentType) {
    this.lastContentType = lastContentType;
    return this;
  }

  public void unsetLastContentType() {
    this.lastContentType = null;
  }

  /** Returns true if field lastContentType is set (has been assigned a value) and false otherwise */
  public boolean isSetLastContentType() {
    return this.lastContentType != null;
  }

  public void setLastContentTypeIsSet(boolean value) {
    if (!value) {
      this.lastContentType = null;
    }
  }

  /**
   * 
   * @see com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType
   */
  public com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType getLastExpressType() {
    return this.lastExpressType;
  }

  /**
   * 
   * @see com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType
   */
  public MemberInfo setLastExpressType(com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType lastExpressType) {
    this.lastExpressType = lastExpressType;
    return this;
  }

  public void unsetLastExpressType() {
    this.lastExpressType = null;
  }

  /** Returns true if field lastExpressType is set (has been assigned a value) and false otherwise */
  public boolean isSetLastExpressType() {
    return this.lastExpressType != null;
  }

  public void setLastExpressTypeIsSet(boolean value) {
    if (!value) {
      this.lastExpressType = null;
    }
  }

  public String getLastTextContent() {
    return this.lastTextContent;
  }

  public MemberInfo setLastTextContent(String lastTextContent) {
    this.lastTextContent = lastTextContent;
    return this;
  }

  public void unsetLastTextContent() {
    this.lastTextContent = null;
  }

  /** Returns true if field lastTextContent is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTextContent() {
    return this.lastTextContent != null;
  }

  public void setLastTextContentIsSet(boolean value) {
    if (!value) {
      this.lastTextContent = null;
    }
  }

  /**
   * 
   * @see AllowStatus
   */
  public AllowStatus getAllowStatus() {
    return this.allowStatus;
  }

  /**
   * 
   * @see AllowStatus
   */
  public MemberInfo setAllowStatus(AllowStatus allowStatus) {
    this.allowStatus = allowStatus;
    return this;
  }

  public void unsetAllowStatus() {
    this.allowStatus = null;
  }

  /** Returns true if field allowStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowStatus() {
    return this.allowStatus != null;
  }

  public void setAllowStatusIsSet(boolean value) {
    if (!value) {
      this.allowStatus = null;
    }
  }

  public String getFigureUrl() {
    return this.figureUrl;
  }

  public MemberInfo setFigureUrl(String figureUrl) {
    this.figureUrl = figureUrl;
    return this;
  }

  public void unsetFigureUrl() {
    this.figureUrl = null;
  }

  /** Returns true if field figureUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFigureUrl() {
    return this.figureUrl != null;
  }

  public void setFigureUrlIsSet(boolean value) {
    if (!value) {
      this.figureUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case NIKE_NAME:
      if (value == null) {
        unsetNikeName();
      } else {
        setNikeName((String)value);
      }
      break;

    case RELATION:
      if (value == null) {
        unsetRelation();
      } else {
        setRelation((String)value);
      }
      break;

    case UN_READ_NUM:
      if (value == null) {
        unsetUnReadNum();
      } else {
        setUnReadNum((Short)value);
      }
      break;

    case LAST_SEND_TIME:
      if (value == null) {
        unsetLastSendTime();
      } else {
        setLastSendTime((String)value);
      }
      break;

    case LAST_CONTENT_TYPE:
      if (value == null) {
        unsetLastContentType();
      } else {
        setLastContentType((com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType)value);
      }
      break;

    case LAST_EXPRESS_TYPE:
      if (value == null) {
        unsetLastExpressType();
      } else {
        setLastExpressType((com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType)value);
      }
      break;

    case LAST_TEXT_CONTENT:
      if (value == null) {
        unsetLastTextContent();
      } else {
        setLastTextContent((String)value);
      }
      break;

    case ALLOW_STATUS:
      if (value == null) {
        unsetAllowStatus();
      } else {
        setAllowStatus((AllowStatus)value);
      }
      break;

    case FIGURE_URL:
      if (value == null) {
        unsetFigureUrl();
      } else {
        setFigureUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case USER_NAME:
      return getUserName();

    case NIKE_NAME:
      return getNikeName();

    case RELATION:
      return getRelation();

    case UN_READ_NUM:
      return Short.valueOf(getUnReadNum());

    case LAST_SEND_TIME:
      return getLastSendTime();

    case LAST_CONTENT_TYPE:
      return getLastContentType();

    case LAST_EXPRESS_TYPE:
      return getLastExpressType();

    case LAST_TEXT_CONTENT:
      return getLastTextContent();

    case ALLOW_STATUS:
      return getAllowStatus();

    case FIGURE_URL:
      return getFigureUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case NIKE_NAME:
      return isSetNikeName();
    case RELATION:
      return isSetRelation();
    case UN_READ_NUM:
      return isSetUnReadNum();
    case LAST_SEND_TIME:
      return isSetLastSendTime();
    case LAST_CONTENT_TYPE:
      return isSetLastContentType();
    case LAST_EXPRESS_TYPE:
      return isSetLastExpressType();
    case LAST_TEXT_CONTENT:
      return isSetLastTextContent();
    case ALLOW_STATUS:
      return isSetAllowStatus();
    case FIGURE_URL:
      return isSetFigureUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MemberInfo)
      return this.equals((MemberInfo)that);
    return false;
  }

  public boolean equals(MemberInfo that) {
    if (that == null)
      return false;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_nikeName = true && this.isSetNikeName();
    boolean that_present_nikeName = true && that.isSetNikeName();
    if (this_present_nikeName || that_present_nikeName) {
      if (!(this_present_nikeName && that_present_nikeName))
        return false;
      if (!this.nikeName.equals(that.nikeName))
        return false;
    }

    boolean this_present_relation = true && this.isSetRelation();
    boolean that_present_relation = true && that.isSetRelation();
    if (this_present_relation || that_present_relation) {
      if (!(this_present_relation && that_present_relation))
        return false;
      if (!this.relation.equals(that.relation))
        return false;
    }

    boolean this_present_unReadNum = true;
    boolean that_present_unReadNum = true;
    if (this_present_unReadNum || that_present_unReadNum) {
      if (!(this_present_unReadNum && that_present_unReadNum))
        return false;
      if (this.unReadNum != that.unReadNum)
        return false;
    }

    boolean this_present_lastSendTime = true && this.isSetLastSendTime();
    boolean that_present_lastSendTime = true && that.isSetLastSendTime();
    if (this_present_lastSendTime || that_present_lastSendTime) {
      if (!(this_present_lastSendTime && that_present_lastSendTime))
        return false;
      if (!this.lastSendTime.equals(that.lastSendTime))
        return false;
    }

    boolean this_present_lastContentType = true && this.isSetLastContentType();
    boolean that_present_lastContentType = true && that.isSetLastContentType();
    if (this_present_lastContentType || that_present_lastContentType) {
      if (!(this_present_lastContentType && that_present_lastContentType))
        return false;
      if (!this.lastContentType.equals(that.lastContentType))
        return false;
    }

    boolean this_present_lastExpressType = true && this.isSetLastExpressType();
    boolean that_present_lastExpressType = true && that.isSetLastExpressType();
    if (this_present_lastExpressType || that_present_lastExpressType) {
      if (!(this_present_lastExpressType && that_present_lastExpressType))
        return false;
      if (!this.lastExpressType.equals(that.lastExpressType))
        return false;
    }

    boolean this_present_lastTextContent = true && this.isSetLastTextContent();
    boolean that_present_lastTextContent = true && that.isSetLastTextContent();
    if (this_present_lastTextContent || that_present_lastTextContent) {
      if (!(this_present_lastTextContent && that_present_lastTextContent))
        return false;
      if (!this.lastTextContent.equals(that.lastTextContent))
        return false;
    }

    boolean this_present_allowStatus = true && this.isSetAllowStatus();
    boolean that_present_allowStatus = true && that.isSetAllowStatus();
    if (this_present_allowStatus || that_present_allowStatus) {
      if (!(this_present_allowStatus && that_present_allowStatus))
        return false;
      if (!this.allowStatus.equals(that.allowStatus))
        return false;
    }

    boolean this_present_figureUrl = true && this.isSetFigureUrl();
    boolean that_present_figureUrl = true && that.isSetFigureUrl();
    if (this_present_figureUrl || that_present_figureUrl) {
      if (!(this_present_figureUrl && that_present_figureUrl))
        return false;
      if (!this.figureUrl.equals(that.figureUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MemberInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MemberInfo typedOther = (MemberInfo)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNikeName()).compareTo(typedOther.isSetNikeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNikeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nikeName, typedOther.nikeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelation()).compareTo(typedOther.isSetRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relation, typedOther.relation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReadNum()).compareTo(typedOther.isSetUnReadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReadNum, typedOther.unReadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastSendTime()).compareTo(typedOther.isSetLastSendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastSendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSendTime, typedOther.lastSendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastContentType()).compareTo(typedOther.isSetLastContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastContentType, typedOther.lastContentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastExpressType()).compareTo(typedOther.isSetLastExpressType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastExpressType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastExpressType, typedOther.lastExpressType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTextContent()).compareTo(typedOther.isSetLastTextContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTextContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTextContent, typedOther.lastTextContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowStatus()).compareTo(typedOther.isSetAllowStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowStatus, typedOther.allowStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFigureUrl()).compareTo(typedOther.isSetFigureUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFigureUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.figureUrl, typedOther.figureUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MemberInfo(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nikeName:");
    if (this.nikeName == null) {
      sb.append("null");
    } else {
      sb.append(this.nikeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relation:");
    if (this.relation == null) {
      sb.append("null");
    } else {
      sb.append(this.relation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReadNum:");
    sb.append(this.unReadNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastSendTime:");
    if (this.lastSendTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastSendTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastContentType:");
    if (this.lastContentType == null) {
      sb.append("null");
    } else {
      sb.append(this.lastContentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastExpressType:");
    if (this.lastExpressType == null) {
      sb.append("null");
    } else {
      sb.append(this.lastExpressType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastTextContent:");
    if (this.lastTextContent == null) {
      sb.append("null");
    } else {
      sb.append(this.lastTextContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowStatus:");
    if (this.allowStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.allowStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("figureUrl:");
    if (this.figureUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.figureUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MemberInfoStandardSchemeFactory implements SchemeFactory {
    public MemberInfoStandardScheme getScheme() {
      return new MemberInfoStandardScheme();
    }
  }

  private static class MemberInfoStandardScheme extends StandardScheme<MemberInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MemberInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NIKE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nikeName = iprot.readString();
              struct.setNikeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relation = iprot.readString();
              struct.setRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UN_READ_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.unReadNum = iprot.readI16();
              struct.setUnReadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_SEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastSendTime = iprot.readString();
              struct.setLastSendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastContentType = com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType.findByValue(iprot.readI32());
              struct.setLastContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_EXPRESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastExpressType = com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType.findByValue(iprot.readI32());
              struct.setLastExpressTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_TEXT_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastTextContent = iprot.readString();
              struct.setLastTextContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ALLOW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.allowStatus = AllowStatus.findByValue(iprot.readI32());
              struct.setAllowStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIGURE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.figureUrl = iprot.readString();
              struct.setFigureUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MemberInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.nikeName != null) {
        oprot.writeFieldBegin(NIKE_NAME_FIELD_DESC);
        oprot.writeString(struct.nikeName);
        oprot.writeFieldEnd();
      }
      if (struct.relation != null) {
        oprot.writeFieldBegin(RELATION_FIELD_DESC);
        oprot.writeString(struct.relation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UN_READ_NUM_FIELD_DESC);
      oprot.writeI16(struct.unReadNum);
      oprot.writeFieldEnd();
      if (struct.lastSendTime != null) {
        oprot.writeFieldBegin(LAST_SEND_TIME_FIELD_DESC);
        oprot.writeString(struct.lastSendTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastContentType != null) {
        oprot.writeFieldBegin(LAST_CONTENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.lastContentType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.lastExpressType != null) {
        oprot.writeFieldBegin(LAST_EXPRESS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.lastExpressType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.lastTextContent != null) {
        oprot.writeFieldBegin(LAST_TEXT_CONTENT_FIELD_DESC);
        oprot.writeString(struct.lastTextContent);
        oprot.writeFieldEnd();
      }
      if (struct.allowStatus != null) {
        oprot.writeFieldBegin(ALLOW_STATUS_FIELD_DESC);
        oprot.writeI32(struct.allowStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.figureUrl != null) {
        oprot.writeFieldBegin(FIGURE_URL_FIELD_DESC);
        oprot.writeString(struct.figureUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MemberInfoTupleSchemeFactory implements SchemeFactory {
    public MemberInfoTupleScheme getScheme() {
      return new MemberInfoTupleScheme();
    }
  }

  private static class MemberInfoTupleScheme extends TupleScheme<MemberInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MemberInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetNikeName()) {
        optionals.set(2);
      }
      if (struct.isSetRelation()) {
        optionals.set(3);
      }
      if (struct.isSetUnReadNum()) {
        optionals.set(4);
      }
      if (struct.isSetLastSendTime()) {
        optionals.set(5);
      }
      if (struct.isSetLastContentType()) {
        optionals.set(6);
      }
      if (struct.isSetLastExpressType()) {
        optionals.set(7);
      }
      if (struct.isSetLastTextContent()) {
        optionals.set(8);
      }
      if (struct.isSetAllowStatus()) {
        optionals.set(9);
      }
      if (struct.isSetFigureUrl()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetNikeName()) {
        oprot.writeString(struct.nikeName);
      }
      if (struct.isSetRelation()) {
        oprot.writeString(struct.relation);
      }
      if (struct.isSetUnReadNum()) {
        oprot.writeI16(struct.unReadNum);
      }
      if (struct.isSetLastSendTime()) {
        oprot.writeString(struct.lastSendTime);
      }
      if (struct.isSetLastContentType()) {
        oprot.writeI32(struct.lastContentType.getValue());
      }
      if (struct.isSetLastExpressType()) {
        oprot.writeI32(struct.lastExpressType.getValue());
      }
      if (struct.isSetLastTextContent()) {
        oprot.writeString(struct.lastTextContent);
      }
      if (struct.isSetAllowStatus()) {
        oprot.writeI32(struct.allowStatus.getValue());
      }
      if (struct.isSetFigureUrl()) {
        oprot.writeString(struct.figureUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MemberInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nikeName = iprot.readString();
        struct.setNikeNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.relation = iprot.readString();
        struct.setRelationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.unReadNum = iprot.readI16();
        struct.setUnReadNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastSendTime = iprot.readString();
        struct.setLastSendTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastContentType = com.xikang.channel.familyexpress.rpc.thrift.express.FEContentType.findByValue(iprot.readI32());
        struct.setLastContentTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastExpressType = com.xikang.channel.familyexpress.rpc.thrift.express.ExpressType.findByValue(iprot.readI32());
        struct.setLastExpressTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastTextContent = iprot.readString();
        struct.setLastTextContentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.allowStatus = AllowStatus.findByValue(iprot.readI32());
        struct.setAllowStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.figureUrl = iprot.readString();
        struct.setFigureUrlIsSet(true);
      }
    }
  }

}

