/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.familyexpress.rpc.thrift.express;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExpressInfoAll implements org.apache.thrift.TBase<ExpressInfoAll, ExpressInfoAll._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExpressInfoAll");

  private static final org.apache.thrift.protocol.TField LEFT_UNREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("leftUnreadNum", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField EXPRESS_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("expressInfos", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExpressInfoAllStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExpressInfoAllTupleSchemeFactory());
  }

  public short leftUnreadNum; // required
  public List<ExpressInfo> expressInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT_UNREAD_NUM((short)1, "leftUnreadNum"),
    EXPRESS_INFOS((short)2, "expressInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT_UNREAD_NUM
          return LEFT_UNREAD_NUM;
        case 2: // EXPRESS_INFOS
          return EXPRESS_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEFTUNREADNUM_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT_UNREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("leftUnreadNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EXPRESS_INFOS, new org.apache.thrift.meta_data.FieldMetaData("expressInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExpressInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExpressInfoAll.class, metaDataMap);
  }

  public ExpressInfoAll() {
  }

  public ExpressInfoAll(
    short leftUnreadNum,
    List<ExpressInfo> expressInfos)
  {
    this();
    this.leftUnreadNum = leftUnreadNum;
    setLeftUnreadNumIsSet(true);
    this.expressInfos = expressInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpressInfoAll(ExpressInfoAll other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.leftUnreadNum = other.leftUnreadNum;
    if (other.isSetExpressInfos()) {
      List<ExpressInfo> __this__expressInfos = new ArrayList<ExpressInfo>();
      for (ExpressInfo other_element : other.expressInfos) {
        __this__expressInfos.add(new ExpressInfo(other_element));
      }
      this.expressInfos = __this__expressInfos;
    }
  }

  public ExpressInfoAll deepCopy() {
    return new ExpressInfoAll(this);
  }

  @Override
  public void clear() {
    setLeftUnreadNumIsSet(false);
    this.leftUnreadNum = 0;
    this.expressInfos = null;
  }

  public short getLeftUnreadNum() {
    return this.leftUnreadNum;
  }

  public ExpressInfoAll setLeftUnreadNum(short leftUnreadNum) {
    this.leftUnreadNum = leftUnreadNum;
    setLeftUnreadNumIsSet(true);
    return this;
  }

  public void unsetLeftUnreadNum() {
    __isset_bit_vector.clear(__LEFTUNREADNUM_ISSET_ID);
  }

  /** Returns true if field leftUnreadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftUnreadNum() {
    return __isset_bit_vector.get(__LEFTUNREADNUM_ISSET_ID);
  }

  public void setLeftUnreadNumIsSet(boolean value) {
    __isset_bit_vector.set(__LEFTUNREADNUM_ISSET_ID, value);
  }

  public int getExpressInfosSize() {
    return (this.expressInfos == null) ? 0 : this.expressInfos.size();
  }

  public java.util.Iterator<ExpressInfo> getExpressInfosIterator() {
    return (this.expressInfos == null) ? null : this.expressInfos.iterator();
  }

  public void addToExpressInfos(ExpressInfo elem) {
    if (this.expressInfos == null) {
      this.expressInfos = new ArrayList<ExpressInfo>();
    }
    this.expressInfos.add(elem);
  }

  public List<ExpressInfo> getExpressInfos() {
    return this.expressInfos;
  }

  public ExpressInfoAll setExpressInfos(List<ExpressInfo> expressInfos) {
    this.expressInfos = expressInfos;
    return this;
  }

  public void unsetExpressInfos() {
    this.expressInfos = null;
  }

  /** Returns true if field expressInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExpressInfos() {
    return this.expressInfos != null;
  }

  public void setExpressInfosIsSet(boolean value) {
    if (!value) {
      this.expressInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEFT_UNREAD_NUM:
      if (value == null) {
        unsetLeftUnreadNum();
      } else {
        setLeftUnreadNum((Short)value);
      }
      break;

    case EXPRESS_INFOS:
      if (value == null) {
        unsetExpressInfos();
      } else {
        setExpressInfos((List<ExpressInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT_UNREAD_NUM:
      return Short.valueOf(getLeftUnreadNum());

    case EXPRESS_INFOS:
      return getExpressInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEFT_UNREAD_NUM:
      return isSetLeftUnreadNum();
    case EXPRESS_INFOS:
      return isSetExpressInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpressInfoAll)
      return this.equals((ExpressInfoAll)that);
    return false;
  }

  public boolean equals(ExpressInfoAll that) {
    if (that == null)
      return false;

    boolean this_present_leftUnreadNum = true;
    boolean that_present_leftUnreadNum = true;
    if (this_present_leftUnreadNum || that_present_leftUnreadNum) {
      if (!(this_present_leftUnreadNum && that_present_leftUnreadNum))
        return false;
      if (this.leftUnreadNum != that.leftUnreadNum)
        return false;
    }

    boolean this_present_expressInfos = true && this.isSetExpressInfos();
    boolean that_present_expressInfos = true && that.isSetExpressInfos();
    if (this_present_expressInfos || that_present_expressInfos) {
      if (!(this_present_expressInfos && that_present_expressInfos))
        return false;
      if (!this.expressInfos.equals(that.expressInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ExpressInfoAll other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExpressInfoAll typedOther = (ExpressInfoAll)other;

    lastComparison = Boolean.valueOf(isSetLeftUnreadNum()).compareTo(typedOther.isSetLeftUnreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftUnreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftUnreadNum, typedOther.leftUnreadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpressInfos()).compareTo(typedOther.isSetExpressInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpressInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressInfos, typedOther.expressInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExpressInfoAll(");
    boolean first = true;

    sb.append("leftUnreadNum:");
    sb.append(this.leftUnreadNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expressInfos:");
    if (this.expressInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.expressInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExpressInfoAllStandardSchemeFactory implements SchemeFactory {
    public ExpressInfoAllStandardScheme getScheme() {
      return new ExpressInfoAllStandardScheme();
    }
  }

  private static class ExpressInfoAllStandardScheme extends StandardScheme<ExpressInfoAll> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExpressInfoAll struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT_UNREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.leftUnreadNum = iprot.readI16();
              struct.setLeftUnreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPRESS_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.expressInfos = new ArrayList<ExpressInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ExpressInfo _elem2; // required
                  _elem2 = new ExpressInfo();
                  _elem2.read(iprot);
                  struct.expressInfos.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setExpressInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExpressInfoAll struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEFT_UNREAD_NUM_FIELD_DESC);
      oprot.writeI16(struct.leftUnreadNum);
      oprot.writeFieldEnd();
      if (struct.expressInfos != null) {
        oprot.writeFieldBegin(EXPRESS_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.expressInfos.size()));
          for (ExpressInfo _iter3 : struct.expressInfos)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExpressInfoAllTupleSchemeFactory implements SchemeFactory {
    public ExpressInfoAllTupleScheme getScheme() {
      return new ExpressInfoAllTupleScheme();
    }
  }

  private static class ExpressInfoAllTupleScheme extends TupleScheme<ExpressInfoAll> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExpressInfoAll struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLeftUnreadNum()) {
        optionals.set(0);
      }
      if (struct.isSetExpressInfos()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLeftUnreadNum()) {
        oprot.writeI16(struct.leftUnreadNum);
      }
      if (struct.isSetExpressInfos()) {
        {
          oprot.writeI32(struct.expressInfos.size());
          for (ExpressInfo _iter4 : struct.expressInfos)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExpressInfoAll struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.leftUnreadNum = iprot.readI16();
        struct.setLeftUnreadNumIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.expressInfos = new ArrayList<ExpressInfo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ExpressInfo _elem7; // required
            _elem7 = new ExpressInfo();
            _elem7.read(iprot);
            struct.expressInfos.add(_elem7);
          }
        }
        struct.setExpressInfosIsSet(true);
      }
    }
  }

}

