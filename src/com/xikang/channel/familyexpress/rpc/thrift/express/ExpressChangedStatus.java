/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.familyexpress.rpc.thrift.express;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExpressChangedStatus implements org.apache.thrift.TBase<ExpressChangedStatus, ExpressChangedStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExpressChangedStatus");

  private static final org.apache.thrift.protocol.TField EXPRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("expressId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPRESS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("expressStatus", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExpressChangedStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExpressChangedStatusTupleSchemeFactory());
  }

  public String expressId; // required
  /**
   * 
   * @see ExpressStatus
   */
  public ExpressStatus expressStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPRESS_ID((short)1, "expressId"),
    /**
     * 
     * @see ExpressStatus
     */
    EXPRESS_STATUS((short)2, "expressStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPRESS_ID
          return EXPRESS_ID;
        case 2: // EXPRESS_STATUS
          return EXPRESS_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("expressId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPRESS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("expressStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExpressStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExpressChangedStatus.class, metaDataMap);
  }

  public ExpressChangedStatus() {
  }

  public ExpressChangedStatus(
    String expressId,
    ExpressStatus expressStatus)
  {
    this();
    this.expressId = expressId;
    this.expressStatus = expressStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpressChangedStatus(ExpressChangedStatus other) {
    if (other.isSetExpressId()) {
      this.expressId = other.expressId;
    }
    if (other.isSetExpressStatus()) {
      this.expressStatus = other.expressStatus;
    }
  }

  public ExpressChangedStatus deepCopy() {
    return new ExpressChangedStatus(this);
  }

  @Override
  public void clear() {
    this.expressId = null;
    this.expressStatus = null;
  }

  public String getExpressId() {
    return this.expressId;
  }

  public ExpressChangedStatus setExpressId(String expressId) {
    this.expressId = expressId;
    return this;
  }

  public void unsetExpressId() {
    this.expressId = null;
  }

  /** Returns true if field expressId is set (has been assigned a value) and false otherwise */
  public boolean isSetExpressId() {
    return this.expressId != null;
  }

  public void setExpressIdIsSet(boolean value) {
    if (!value) {
      this.expressId = null;
    }
  }

  /**
   * 
   * @see ExpressStatus
   */
  public ExpressStatus getExpressStatus() {
    return this.expressStatus;
  }

  /**
   * 
   * @see ExpressStatus
   */
  public ExpressChangedStatus setExpressStatus(ExpressStatus expressStatus) {
    this.expressStatus = expressStatus;
    return this;
  }

  public void unsetExpressStatus() {
    this.expressStatus = null;
  }

  /** Returns true if field expressStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetExpressStatus() {
    return this.expressStatus != null;
  }

  public void setExpressStatusIsSet(boolean value) {
    if (!value) {
      this.expressStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPRESS_ID:
      if (value == null) {
        unsetExpressId();
      } else {
        setExpressId((String)value);
      }
      break;

    case EXPRESS_STATUS:
      if (value == null) {
        unsetExpressStatus();
      } else {
        setExpressStatus((ExpressStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPRESS_ID:
      return getExpressId();

    case EXPRESS_STATUS:
      return getExpressStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPRESS_ID:
      return isSetExpressId();
    case EXPRESS_STATUS:
      return isSetExpressStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpressChangedStatus)
      return this.equals((ExpressChangedStatus)that);
    return false;
  }

  public boolean equals(ExpressChangedStatus that) {
    if (that == null)
      return false;

    boolean this_present_expressId = true && this.isSetExpressId();
    boolean that_present_expressId = true && that.isSetExpressId();
    if (this_present_expressId || that_present_expressId) {
      if (!(this_present_expressId && that_present_expressId))
        return false;
      if (!this.expressId.equals(that.expressId))
        return false;
    }

    boolean this_present_expressStatus = true && this.isSetExpressStatus();
    boolean that_present_expressStatus = true && that.isSetExpressStatus();
    if (this_present_expressStatus || that_present_expressStatus) {
      if (!(this_present_expressStatus && that_present_expressStatus))
        return false;
      if (!this.expressStatus.equals(that.expressStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ExpressChangedStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExpressChangedStatus typedOther = (ExpressChangedStatus)other;

    lastComparison = Boolean.valueOf(isSetExpressId()).compareTo(typedOther.isSetExpressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressId, typedOther.expressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpressStatus()).compareTo(typedOther.isSetExpressStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpressStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressStatus, typedOther.expressStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExpressChangedStatus(");
    boolean first = true;

    sb.append("expressId:");
    if (this.expressId == null) {
      sb.append("null");
    } else {
      sb.append(this.expressId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expressStatus:");
    if (this.expressStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.expressStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExpressChangedStatusStandardSchemeFactory implements SchemeFactory {
    public ExpressChangedStatusStandardScheme getScheme() {
      return new ExpressChangedStatusStandardScheme();
    }
  }

  private static class ExpressChangedStatusStandardScheme extends StandardScheme<ExpressChangedStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExpressChangedStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expressId = iprot.readString();
              struct.setExpressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPRESS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expressStatus = ExpressStatus.findByValue(iprot.readI32());
              struct.setExpressStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExpressChangedStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.expressId != null) {
        oprot.writeFieldBegin(EXPRESS_ID_FIELD_DESC);
        oprot.writeString(struct.expressId);
        oprot.writeFieldEnd();
      }
      if (struct.expressStatus != null) {
        oprot.writeFieldBegin(EXPRESS_STATUS_FIELD_DESC);
        oprot.writeI32(struct.expressStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExpressChangedStatusTupleSchemeFactory implements SchemeFactory {
    public ExpressChangedStatusTupleScheme getScheme() {
      return new ExpressChangedStatusTupleScheme();
    }
  }

  private static class ExpressChangedStatusTupleScheme extends TupleScheme<ExpressChangedStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExpressChangedStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExpressId()) {
        optionals.set(0);
      }
      if (struct.isSetExpressStatus()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetExpressId()) {
        oprot.writeString(struct.expressId);
      }
      if (struct.isSetExpressStatus()) {
        oprot.writeI32(struct.expressStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExpressChangedStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.expressId = iprot.readString();
        struct.setExpressIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.expressStatus = ExpressStatus.findByValue(iprot.readI32());
        struct.setExpressStatusIsSet(true);
      }
    }
  }

}

