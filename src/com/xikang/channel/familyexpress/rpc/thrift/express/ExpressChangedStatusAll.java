/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.familyexpress.rpc.thrift.express;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExpressChangedStatusAll implements org.apache.thrift.TBase<ExpressChangedStatusAll, ExpressChangedStatusAll._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExpressChangedStatusAll");

  private static final org.apache.thrift.protocol.TField STATUS_CHANGED_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("statusChangedMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("serverTime", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExpressChangedStatusAllStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExpressChangedStatusAllTupleSchemeFactory());
  }

  public Map<String,List<ExpressChangedStatus>> statusChangedMap; // required
  public long serverTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS_CHANGED_MAP((short)1, "statusChangedMap"),
    SERVER_TIME((short)2, "serverTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS_CHANGED_MAP
          return STATUS_CHANGED_MAP;
        case 2: // SERVER_TIME
          return SERVER_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVERTIME_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS_CHANGED_MAP, new org.apache.thrift.meta_data.FieldMetaData("statusChangedMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExpressChangedStatus.class)))));
    tmpMap.put(_Fields.SERVER_TIME, new org.apache.thrift.meta_data.FieldMetaData("serverTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExpressChangedStatusAll.class, metaDataMap);
  }

  public ExpressChangedStatusAll() {
  }

  public ExpressChangedStatusAll(
    Map<String,List<ExpressChangedStatus>> statusChangedMap,
    long serverTime)
  {
    this();
    this.statusChangedMap = statusChangedMap;
    this.serverTime = serverTime;
    setServerTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpressChangedStatusAll(ExpressChangedStatusAll other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetStatusChangedMap()) {
      Map<String,List<ExpressChangedStatus>> __this__statusChangedMap = new HashMap<String,List<ExpressChangedStatus>>();
      for (Map.Entry<String, List<ExpressChangedStatus>> other_element : other.statusChangedMap.entrySet()) {

        String other_element_key = other_element.getKey();
        List<ExpressChangedStatus> other_element_value = other_element.getValue();

        String __this__statusChangedMap_copy_key = other_element_key;

        List<ExpressChangedStatus> __this__statusChangedMap_copy_value = new ArrayList<ExpressChangedStatus>();
        for (ExpressChangedStatus other_element_value_element : other_element_value) {
          __this__statusChangedMap_copy_value.add(new ExpressChangedStatus(other_element_value_element));
        }

        __this__statusChangedMap.put(__this__statusChangedMap_copy_key, __this__statusChangedMap_copy_value);
      }
      this.statusChangedMap = __this__statusChangedMap;
    }
    this.serverTime = other.serverTime;
  }

  public ExpressChangedStatusAll deepCopy() {
    return new ExpressChangedStatusAll(this);
  }

  @Override
  public void clear() {
    this.statusChangedMap = null;
    setServerTimeIsSet(false);
    this.serverTime = 0;
  }

  public int getStatusChangedMapSize() {
    return (this.statusChangedMap == null) ? 0 : this.statusChangedMap.size();
  }

  public void putToStatusChangedMap(String key, List<ExpressChangedStatus> val) {
    if (this.statusChangedMap == null) {
      this.statusChangedMap = new HashMap<String,List<ExpressChangedStatus>>();
    }
    this.statusChangedMap.put(key, val);
  }

  public Map<String,List<ExpressChangedStatus>> getStatusChangedMap() {
    return this.statusChangedMap;
  }

  public ExpressChangedStatusAll setStatusChangedMap(Map<String,List<ExpressChangedStatus>> statusChangedMap) {
    this.statusChangedMap = statusChangedMap;
    return this;
  }

  public void unsetStatusChangedMap() {
    this.statusChangedMap = null;
  }

  /** Returns true if field statusChangedMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusChangedMap() {
    return this.statusChangedMap != null;
  }

  public void setStatusChangedMapIsSet(boolean value) {
    if (!value) {
      this.statusChangedMap = null;
    }
  }

  public long getServerTime() {
    return this.serverTime;
  }

  public ExpressChangedStatusAll setServerTime(long serverTime) {
    this.serverTime = serverTime;
    setServerTimeIsSet(true);
    return this;
  }

  public void unsetServerTime() {
    __isset_bit_vector.clear(__SERVERTIME_ISSET_ID);
  }

  /** Returns true if field serverTime is set (has been assigned a value) and false otherwise */
  public boolean isSetServerTime() {
    return __isset_bit_vector.get(__SERVERTIME_ISSET_ID);
  }

  public void setServerTimeIsSet(boolean value) {
    __isset_bit_vector.set(__SERVERTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS_CHANGED_MAP:
      if (value == null) {
        unsetStatusChangedMap();
      } else {
        setStatusChangedMap((Map<String,List<ExpressChangedStatus>>)value);
      }
      break;

    case SERVER_TIME:
      if (value == null) {
        unsetServerTime();
      } else {
        setServerTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS_CHANGED_MAP:
      return getStatusChangedMap();

    case SERVER_TIME:
      return Long.valueOf(getServerTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS_CHANGED_MAP:
      return isSetStatusChangedMap();
    case SERVER_TIME:
      return isSetServerTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpressChangedStatusAll)
      return this.equals((ExpressChangedStatusAll)that);
    return false;
  }

  public boolean equals(ExpressChangedStatusAll that) {
    if (that == null)
      return false;

    boolean this_present_statusChangedMap = true && this.isSetStatusChangedMap();
    boolean that_present_statusChangedMap = true && that.isSetStatusChangedMap();
    if (this_present_statusChangedMap || that_present_statusChangedMap) {
      if (!(this_present_statusChangedMap && that_present_statusChangedMap))
        return false;
      if (!this.statusChangedMap.equals(that.statusChangedMap))
        return false;
    }

    boolean this_present_serverTime = true;
    boolean that_present_serverTime = true;
    if (this_present_serverTime || that_present_serverTime) {
      if (!(this_present_serverTime && that_present_serverTime))
        return false;
      if (this.serverTime != that.serverTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ExpressChangedStatusAll other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExpressChangedStatusAll typedOther = (ExpressChangedStatusAll)other;

    lastComparison = Boolean.valueOf(isSetStatusChangedMap()).compareTo(typedOther.isSetStatusChangedMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusChangedMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusChangedMap, typedOther.statusChangedMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerTime()).compareTo(typedOther.isSetServerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverTime, typedOther.serverTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExpressChangedStatusAll(");
    boolean first = true;

    sb.append("statusChangedMap:");
    if (this.statusChangedMap == null) {
      sb.append("null");
    } else {
      sb.append(this.statusChangedMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverTime:");
    sb.append(this.serverTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExpressChangedStatusAllStandardSchemeFactory implements SchemeFactory {
    public ExpressChangedStatusAllStandardScheme getScheme() {
      return new ExpressChangedStatusAllStandardScheme();
    }
  }

  private static class ExpressChangedStatusAllStandardScheme extends StandardScheme<ExpressChangedStatusAll> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExpressChangedStatusAll struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS_CHANGED_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.statusChangedMap = new HashMap<String,List<ExpressChangedStatus>>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10; // required
                  List<ExpressChangedStatus> _val11; // required
                  _key10 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                    _val11 = new ArrayList<ExpressChangedStatus>(_list12.size);
                    for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                    {
                      ExpressChangedStatus _elem14; // required
                      _elem14 = new ExpressChangedStatus();
                      _elem14.read(iprot);
                      _val11.add(_elem14);
                    }
                    iprot.readListEnd();
                  }
                  struct.statusChangedMap.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setStatusChangedMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serverTime = iprot.readI64();
              struct.setServerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExpressChangedStatusAll struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.statusChangedMap != null) {
        oprot.writeFieldBegin(STATUS_CHANGED_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.statusChangedMap.size()));
          for (Map.Entry<String, List<ExpressChangedStatus>> _iter15 : struct.statusChangedMap.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter15.getValue().size()));
              for (ExpressChangedStatus _iter16 : _iter15.getValue())
              {
                _iter16.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVER_TIME_FIELD_DESC);
      oprot.writeI64(struct.serverTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExpressChangedStatusAllTupleSchemeFactory implements SchemeFactory {
    public ExpressChangedStatusAllTupleScheme getScheme() {
      return new ExpressChangedStatusAllTupleScheme();
    }
  }

  private static class ExpressChangedStatusAllTupleScheme extends TupleScheme<ExpressChangedStatusAll> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExpressChangedStatusAll struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatusChangedMap()) {
        optionals.set(0);
      }
      if (struct.isSetServerTime()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStatusChangedMap()) {
        {
          oprot.writeI32(struct.statusChangedMap.size());
          for (Map.Entry<String, List<ExpressChangedStatus>> _iter17 : struct.statusChangedMap.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            {
              oprot.writeI32(_iter17.getValue().size());
              for (ExpressChangedStatus _iter18 : _iter17.getValue())
              {
                _iter18.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetServerTime()) {
        oprot.writeI64(struct.serverTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExpressChangedStatusAll struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.statusChangedMap = new HashMap<String,List<ExpressChangedStatus>>(2*_map19.size);
          for (int _i20 = 0; _i20 < _map19.size; ++_i20)
          {
            String _key21; // required
            List<ExpressChangedStatus> _val22; // required
            _key21 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val22 = new ArrayList<ExpressChangedStatus>(_list23.size);
              for (int _i24 = 0; _i24 < _list23.size; ++_i24)
              {
                ExpressChangedStatus _elem25; // required
                _elem25 = new ExpressChangedStatus();
                _elem25.read(iprot);
                _val22.add(_elem25);
              }
            }
            struct.statusChangedMap.put(_key21, _val22);
          }
        }
        struct.setStatusChangedMapIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverTime = iprot.readI64();
        struct.setServerTimeIsSet(true);
      }
    }
  }

}

