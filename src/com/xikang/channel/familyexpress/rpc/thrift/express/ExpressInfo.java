/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xikang.channel.familyexpress.rpc.thrift.express;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExpressInfo implements org.apache.thrift.TBase<ExpressInfo, ExpressInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExpressInfo");

  private static final org.apache.thrift.protocol.TField EXPRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("expressId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_TERMINAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTerminalType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXPRESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("expressType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I16, (short)9);
  private static final org.apache.thrift.protocol.TField TEXT_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("textContent", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DATA_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataContent", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXPRESS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("expressStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExpressInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExpressInfoTupleSchemeFactory());
  }

  public String expressId; // required
  public String from; // required
  public String to; // required
  /**
   * 
   * @see com.xikang.channel.common.rpc.thrift.message.DeviceType
   */
  public com.xikang.channel.common.rpc.thrift.message.DeviceType fromTerminalType; // required
  public String time; // required
  /**
   * 
   * @see ExpressType
   */
  public ExpressType expressType; // required
  /**
   * 
   * @see FEContentType
   */
  public FEContentType contentType; // required
  /**
   * 
   * @see FEFormatType
   */
  public FEFormatType format; // required
  public short length; // required
  public String textContent; // required
  public ByteBuffer dataContent; // required
  /**
   * 
   * @see ExpressStatus
   */
  public ExpressStatus expressStatus; // required
  public long updateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPRESS_ID((short)1, "expressId"),
    FROM((short)2, "from"),
    TO((short)3, "to"),
    /**
     * 
     * @see com.xikang.channel.common.rpc.thrift.message.DeviceType
     */
    FROM_TERMINAL_TYPE((short)4, "fromTerminalType"),
    TIME((short)5, "time"),
    /**
     * 
     * @see ExpressType
     */
    EXPRESS_TYPE((short)6, "expressType"),
    /**
     * 
     * @see FEContentType
     */
    CONTENT_TYPE((short)7, "contentType"),
    /**
     * 
     * @see FEFormatType
     */
    FORMAT((short)8, "format"),
    LENGTH((short)9, "length"),
    TEXT_CONTENT((short)10, "textContent"),
    DATA_CONTENT((short)11, "dataContent"),
    /**
     * 
     * @see ExpressStatus
     */
    EXPRESS_STATUS((short)12, "expressStatus"),
    UPDATE_TIME((short)13, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPRESS_ID
          return EXPRESS_ID;
        case 2: // FROM
          return FROM;
        case 3: // TO
          return TO;
        case 4: // FROM_TERMINAL_TYPE
          return FROM_TERMINAL_TYPE;
        case 5: // TIME
          return TIME;
        case 6: // EXPRESS_TYPE
          return EXPRESS_TYPE;
        case 7: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 8: // FORMAT
          return FORMAT;
        case 9: // LENGTH
          return LENGTH;
        case 10: // TEXT_CONTENT
          return TEXT_CONTENT;
        case 11: // DATA_CONTENT
          return DATA_CONTENT;
        case 12: // EXPRESS_STATUS
          return EXPRESS_STATUS;
        case 13: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LENGTH_ISSET_ID = 0;
  private static final int __UPDATETIME_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("expressId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_TERMINAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fromTerminalType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.xikang.channel.common.rpc.thrift.message.DeviceType.class)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPRESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("expressType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExpressType.class)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FEContentType.class)));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FEFormatType.class)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TEXT_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("textContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("dataContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EXPRESS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("expressStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExpressStatus.class)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExpressInfo.class, metaDataMap);
  }

  public ExpressInfo() {
  }

  public ExpressInfo(
    String expressId,
    String from,
    String to,
    com.xikang.channel.common.rpc.thrift.message.DeviceType fromTerminalType,
    String time,
    ExpressType expressType,
    FEContentType contentType,
    FEFormatType format,
    short length,
    String textContent,
    ByteBuffer dataContent,
    ExpressStatus expressStatus,
    long updateTime)
  {
    this();
    this.expressId = expressId;
    this.from = from;
    this.to = to;
    this.fromTerminalType = fromTerminalType;
    this.time = time;
    this.expressType = expressType;
    this.contentType = contentType;
    this.format = format;
    this.length = length;
    setLengthIsSet(true);
    this.textContent = textContent;
    this.dataContent = dataContent;
    this.expressStatus = expressStatus;
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpressInfo(ExpressInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetExpressId()) {
      this.expressId = other.expressId;
    }
    if (other.isSetFrom()) {
      this.from = other.from;
    }
    if (other.isSetTo()) {
      this.to = other.to;
    }
    if (other.isSetFromTerminalType()) {
      this.fromTerminalType = other.fromTerminalType;
    }
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetExpressType()) {
      this.expressType = other.expressType;
    }
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetFormat()) {
      this.format = other.format;
    }
    this.length = other.length;
    if (other.isSetTextContent()) {
      this.textContent = other.textContent;
    }
    if (other.isSetDataContent()) {
      this.dataContent = org.apache.thrift.TBaseHelper.copyBinary(other.dataContent);
;
    }
    if (other.isSetExpressStatus()) {
      this.expressStatus = other.expressStatus;
    }
    this.updateTime = other.updateTime;
  }

  public ExpressInfo deepCopy() {
    return new ExpressInfo(this);
  }

  @Override
  public void clear() {
    this.expressId = null;
    this.from = null;
    this.to = null;
    this.fromTerminalType = null;
    this.time = null;
    this.expressType = null;
    this.contentType = null;
    this.format = null;
    setLengthIsSet(false);
    this.length = 0;
    this.textContent = null;
    this.dataContent = null;
    this.expressStatus = null;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
  }

  public String getExpressId() {
    return this.expressId;
  }

  public ExpressInfo setExpressId(String expressId) {
    this.expressId = expressId;
    return this;
  }

  public void unsetExpressId() {
    this.expressId = null;
  }

  /** Returns true if field expressId is set (has been assigned a value) and false otherwise */
  public boolean isSetExpressId() {
    return this.expressId != null;
  }

  public void setExpressIdIsSet(boolean value) {
    if (!value) {
      this.expressId = null;
    }
  }

  public String getFrom() {
    return this.from;
  }

  public ExpressInfo setFrom(String from) {
    this.from = from;
    return this;
  }

  public void unsetFrom() {
    this.from = null;
  }

  /** Returns true if field from is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom() {
    return this.from != null;
  }

  public void setFromIsSet(boolean value) {
    if (!value) {
      this.from = null;
    }
  }

  public String getTo() {
    return this.to;
  }

  public ExpressInfo setTo(String to) {
    this.to = to;
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  /**
   * 
   * @see com.xikang.channel.common.rpc.thrift.message.DeviceType
   */
  public com.xikang.channel.common.rpc.thrift.message.DeviceType getFromTerminalType() {
    return this.fromTerminalType;
  }

  /**
   * 
   * @see com.xikang.channel.common.rpc.thrift.message.DeviceType
   */
  public ExpressInfo setFromTerminalType(com.xikang.channel.common.rpc.thrift.message.DeviceType fromTerminalType) {
    this.fromTerminalType = fromTerminalType;
    return this;
  }

  public void unsetFromTerminalType() {
    this.fromTerminalType = null;
  }

  /** Returns true if field fromTerminalType is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTerminalType() {
    return this.fromTerminalType != null;
  }

  public void setFromTerminalTypeIsSet(boolean value) {
    if (!value) {
      this.fromTerminalType = null;
    }
  }

  public String getTime() {
    return this.time;
  }

  public ExpressInfo setTime(String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  /**
   * 
   * @see ExpressType
   */
  public ExpressType getExpressType() {
    return this.expressType;
  }

  /**
   * 
   * @see ExpressType
   */
  public ExpressInfo setExpressType(ExpressType expressType) {
    this.expressType = expressType;
    return this;
  }

  public void unsetExpressType() {
    this.expressType = null;
  }

  /** Returns true if field expressType is set (has been assigned a value) and false otherwise */
  public boolean isSetExpressType() {
    return this.expressType != null;
  }

  public void setExpressTypeIsSet(boolean value) {
    if (!value) {
      this.expressType = null;
    }
  }

  /**
   * 
   * @see FEContentType
   */
  public FEContentType getContentType() {
    return this.contentType;
  }

  /**
   * 
   * @see FEContentType
   */
  public ExpressInfo setContentType(FEContentType contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  /**
   * 
   * @see FEFormatType
   */
  public FEFormatType getFormat() {
    return this.format;
  }

  /**
   * 
   * @see FEFormatType
   */
  public ExpressInfo setFormat(FEFormatType format) {
    this.format = format;
    return this;
  }

  public void unsetFormat() {
    this.format = null;
  }

  /** Returns true if field format is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  public short getLength() {
    return this.length;
  }

  public ExpressInfo setLength(short length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bit_vector.clear(__LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return __isset_bit_vector.get(__LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bit_vector.set(__LENGTH_ISSET_ID, value);
  }

  public String getTextContent() {
    return this.textContent;
  }

  public ExpressInfo setTextContent(String textContent) {
    this.textContent = textContent;
    return this;
  }

  public void unsetTextContent() {
    this.textContent = null;
  }

  /** Returns true if field textContent is set (has been assigned a value) and false otherwise */
  public boolean isSetTextContent() {
    return this.textContent != null;
  }

  public void setTextContentIsSet(boolean value) {
    if (!value) {
      this.textContent = null;
    }
  }

  public byte[] getDataContent() {
    setDataContent(org.apache.thrift.TBaseHelper.rightSize(dataContent));
    return dataContent == null ? null : dataContent.array();
  }

  public ByteBuffer bufferForDataContent() {
    return dataContent;
  }

  public ExpressInfo setDataContent(byte[] dataContent) {
    setDataContent(dataContent == null ? (ByteBuffer)null : ByteBuffer.wrap(dataContent));
    return this;
  }

  public ExpressInfo setDataContent(ByteBuffer dataContent) {
    this.dataContent = dataContent;
    return this;
  }

  public void unsetDataContent() {
    this.dataContent = null;
  }

  /** Returns true if field dataContent is set (has been assigned a value) and false otherwise */
  public boolean isSetDataContent() {
    return this.dataContent != null;
  }

  public void setDataContentIsSet(boolean value) {
    if (!value) {
      this.dataContent = null;
    }
  }

  /**
   * 
   * @see ExpressStatus
   */
  public ExpressStatus getExpressStatus() {
    return this.expressStatus;
  }

  /**
   * 
   * @see ExpressStatus
   */
  public ExpressInfo setExpressStatus(ExpressStatus expressStatus) {
    this.expressStatus = expressStatus;
    return this;
  }

  public void unsetExpressStatus() {
    this.expressStatus = null;
  }

  /** Returns true if field expressStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetExpressStatus() {
    return this.expressStatus != null;
  }

  public void setExpressStatusIsSet(boolean value) {
    if (!value) {
      this.expressStatus = null;
    }
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public ExpressInfo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bit_vector.clear(__UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return __isset_bit_vector.get(__UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPRESS_ID:
      if (value == null) {
        unsetExpressId();
      } else {
        setExpressId((String)value);
      }
      break;

    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((String)value);
      }
      break;

    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((String)value);
      }
      break;

    case FROM_TERMINAL_TYPE:
      if (value == null) {
        unsetFromTerminalType();
      } else {
        setFromTerminalType((com.xikang.channel.common.rpc.thrift.message.DeviceType)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case EXPRESS_TYPE:
      if (value == null) {
        unsetExpressType();
      } else {
        setExpressType((ExpressType)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((FEContentType)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((FEFormatType)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Short)value);
      }
      break;

    case TEXT_CONTENT:
      if (value == null) {
        unsetTextContent();
      } else {
        setTextContent((String)value);
      }
      break;

    case DATA_CONTENT:
      if (value == null) {
        unsetDataContent();
      } else {
        setDataContent((ByteBuffer)value);
      }
      break;

    case EXPRESS_STATUS:
      if (value == null) {
        unsetExpressStatus();
      } else {
        setExpressStatus((ExpressStatus)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPRESS_ID:
      return getExpressId();

    case FROM:
      return getFrom();

    case TO:
      return getTo();

    case FROM_TERMINAL_TYPE:
      return getFromTerminalType();

    case TIME:
      return getTime();

    case EXPRESS_TYPE:
      return getExpressType();

    case CONTENT_TYPE:
      return getContentType();

    case FORMAT:
      return getFormat();

    case LENGTH:
      return Short.valueOf(getLength());

    case TEXT_CONTENT:
      return getTextContent();

    case DATA_CONTENT:
      return getDataContent();

    case EXPRESS_STATUS:
      return getExpressStatus();

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPRESS_ID:
      return isSetExpressId();
    case FROM:
      return isSetFrom();
    case TO:
      return isSetTo();
    case FROM_TERMINAL_TYPE:
      return isSetFromTerminalType();
    case TIME:
      return isSetTime();
    case EXPRESS_TYPE:
      return isSetExpressType();
    case CONTENT_TYPE:
      return isSetContentType();
    case FORMAT:
      return isSetFormat();
    case LENGTH:
      return isSetLength();
    case TEXT_CONTENT:
      return isSetTextContent();
    case DATA_CONTENT:
      return isSetDataContent();
    case EXPRESS_STATUS:
      return isSetExpressStatus();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpressInfo)
      return this.equals((ExpressInfo)that);
    return false;
  }

  public boolean equals(ExpressInfo that) {
    if (that == null)
      return false;

    boolean this_present_expressId = true && this.isSetExpressId();
    boolean that_present_expressId = true && that.isSetExpressId();
    if (this_present_expressId || that_present_expressId) {
      if (!(this_present_expressId && that_present_expressId))
        return false;
      if (!this.expressId.equals(that.expressId))
        return false;
    }

    boolean this_present_from = true && this.isSetFrom();
    boolean that_present_from = true && that.isSetFrom();
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (!this.from.equals(that.from))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_fromTerminalType = true && this.isSetFromTerminalType();
    boolean that_present_fromTerminalType = true && that.isSetFromTerminalType();
    if (this_present_fromTerminalType || that_present_fromTerminalType) {
      if (!(this_present_fromTerminalType && that_present_fromTerminalType))
        return false;
      if (!this.fromTerminalType.equals(that.fromTerminalType))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_expressType = true && this.isSetExpressType();
    boolean that_present_expressType = true && that.isSetExpressType();
    if (this_present_expressType || that_present_expressType) {
      if (!(this_present_expressType && that_present_expressType))
        return false;
      if (!this.expressType.equals(that.expressType))
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!this.format.equals(that.format))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_textContent = true && this.isSetTextContent();
    boolean that_present_textContent = true && that.isSetTextContent();
    if (this_present_textContent || that_present_textContent) {
      if (!(this_present_textContent && that_present_textContent))
        return false;
      if (!this.textContent.equals(that.textContent))
        return false;
    }

    boolean this_present_dataContent = true && this.isSetDataContent();
    boolean that_present_dataContent = true && that.isSetDataContent();
    if (this_present_dataContent || that_present_dataContent) {
      if (!(this_present_dataContent && that_present_dataContent))
        return false;
      if (!this.dataContent.equals(that.dataContent))
        return false;
    }

    boolean this_present_expressStatus = true && this.isSetExpressStatus();
    boolean that_present_expressStatus = true && that.isSetExpressStatus();
    if (this_present_expressStatus || that_present_expressStatus) {
      if (!(this_present_expressStatus && that_present_expressStatus))
        return false;
      if (!this.expressStatus.equals(that.expressStatus))
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ExpressInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExpressInfo typedOther = (ExpressInfo)other;

    lastComparison = Boolean.valueOf(isSetExpressId()).compareTo(typedOther.isSetExpressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressId, typedOther.expressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, typedOther.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(typedOther.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, typedOther.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromTerminalType()).compareTo(typedOther.isSetFromTerminalType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTerminalType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTerminalType, typedOther.fromTerminalType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpressType()).compareTo(typedOther.isSetExpressType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpressType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressType, typedOther.expressType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(typedOther.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, typedOther.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormat()).compareTo(typedOther.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, typedOther.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextContent()).compareTo(typedOther.isSetTextContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textContent, typedOther.textContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataContent()).compareTo(typedOther.isSetDataContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataContent, typedOther.dataContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpressStatus()).compareTo(typedOther.isSetExpressStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpressStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressStatus, typedOther.expressStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExpressInfo(");
    boolean first = true;

    sb.append("expressId:");
    if (this.expressId == null) {
      sb.append("null");
    } else {
      sb.append(this.expressId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("from:");
    if (this.from == null) {
      sb.append("null");
    } else {
      sb.append(this.from);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromTerminalType:");
    if (this.fromTerminalType == null) {
      sb.append("null");
    } else {
      sb.append(this.fromTerminalType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expressType:");
    if (this.expressType == null) {
      sb.append("null");
    } else {
      sb.append(this.expressType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    if (this.contentType == null) {
      sb.append("null");
    } else {
      sb.append(this.contentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("format:");
    if (this.format == null) {
      sb.append("null");
    } else {
      sb.append(this.format);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("textContent:");
    if (this.textContent == null) {
      sb.append("null");
    } else {
      sb.append(this.textContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataContent:");
    if (this.dataContent == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.dataContent, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expressStatus:");
    if (this.expressStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.expressStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExpressInfoStandardSchemeFactory implements SchemeFactory {
    public ExpressInfoStandardScheme getScheme() {
      return new ExpressInfoStandardScheme();
    }
  }

  private static class ExpressInfoStandardScheme extends StandardScheme<ExpressInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExpressInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expressId = iprot.readString();
              struct.setExpressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.from = iprot.readString();
              struct.setFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.to = iprot.readString();
              struct.setToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_TERMINAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fromTerminalType = com.xikang.channel.common.rpc.thrift.message.DeviceType.findByValue(iprot.readI32());
              struct.setFromTerminalTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPRESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expressType = ExpressType.findByValue(iprot.readI32());
              struct.setExpressTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentType = FEContentType.findByValue(iprot.readI32());
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format = FEFormatType.findByValue(iprot.readI32());
              struct.setFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.length = iprot.readI16();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEXT_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textContent = iprot.readString();
              struct.setTextContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATA_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataContent = iprot.readBinary();
              struct.setDataContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXPRESS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expressStatus = ExpressStatus.findByValue(iprot.readI32());
              struct.setExpressStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExpressInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.expressId != null) {
        oprot.writeFieldBegin(EXPRESS_ID_FIELD_DESC);
        oprot.writeString(struct.expressId);
        oprot.writeFieldEnd();
      }
      if (struct.from != null) {
        oprot.writeFieldBegin(FROM_FIELD_DESC);
        oprot.writeString(struct.from);
        oprot.writeFieldEnd();
      }
      if (struct.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(struct.to);
        oprot.writeFieldEnd();
      }
      if (struct.fromTerminalType != null) {
        oprot.writeFieldBegin(FROM_TERMINAL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fromTerminalType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.expressType != null) {
        oprot.writeFieldBegin(EXPRESS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.expressType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.contentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.contentType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.format != null) {
        oprot.writeFieldBegin(FORMAT_FIELD_DESC);
        oprot.writeI32(struct.format.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI16(struct.length);
      oprot.writeFieldEnd();
      if (struct.textContent != null) {
        oprot.writeFieldBegin(TEXT_CONTENT_FIELD_DESC);
        oprot.writeString(struct.textContent);
        oprot.writeFieldEnd();
      }
      if (struct.dataContent != null) {
        oprot.writeFieldBegin(DATA_CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.dataContent);
        oprot.writeFieldEnd();
      }
      if (struct.expressStatus != null) {
        oprot.writeFieldBegin(EXPRESS_STATUS_FIELD_DESC);
        oprot.writeI32(struct.expressStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExpressInfoTupleSchemeFactory implements SchemeFactory {
    public ExpressInfoTupleScheme getScheme() {
      return new ExpressInfoTupleScheme();
    }
  }

  private static class ExpressInfoTupleScheme extends TupleScheme<ExpressInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExpressInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExpressId()) {
        optionals.set(0);
      }
      if (struct.isSetFrom()) {
        optionals.set(1);
      }
      if (struct.isSetTo()) {
        optionals.set(2);
      }
      if (struct.isSetFromTerminalType()) {
        optionals.set(3);
      }
      if (struct.isSetTime()) {
        optionals.set(4);
      }
      if (struct.isSetExpressType()) {
        optionals.set(5);
      }
      if (struct.isSetContentType()) {
        optionals.set(6);
      }
      if (struct.isSetFormat()) {
        optionals.set(7);
      }
      if (struct.isSetLength()) {
        optionals.set(8);
      }
      if (struct.isSetTextContent()) {
        optionals.set(9);
      }
      if (struct.isSetDataContent()) {
        optionals.set(10);
      }
      if (struct.isSetExpressStatus()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetExpressId()) {
        oprot.writeString(struct.expressId);
      }
      if (struct.isSetFrom()) {
        oprot.writeString(struct.from);
      }
      if (struct.isSetTo()) {
        oprot.writeString(struct.to);
      }
      if (struct.isSetFromTerminalType()) {
        oprot.writeI32(struct.fromTerminalType.getValue());
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetExpressType()) {
        oprot.writeI32(struct.expressType.getValue());
      }
      if (struct.isSetContentType()) {
        oprot.writeI32(struct.contentType.getValue());
      }
      if (struct.isSetFormat()) {
        oprot.writeI32(struct.format.getValue());
      }
      if (struct.isSetLength()) {
        oprot.writeI16(struct.length);
      }
      if (struct.isSetTextContent()) {
        oprot.writeString(struct.textContent);
      }
      if (struct.isSetDataContent()) {
        oprot.writeBinary(struct.dataContent);
      }
      if (struct.isSetExpressStatus()) {
        oprot.writeI32(struct.expressStatus.getValue());
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExpressInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.expressId = iprot.readString();
        struct.setExpressIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.from = iprot.readString();
        struct.setFromIsSet(true);
      }
      if (incoming.get(2)) {
        struct.to = iprot.readString();
        struct.setToIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromTerminalType = com.xikang.channel.common.rpc.thrift.message.DeviceType.findByValue(iprot.readI32());
        struct.setFromTerminalTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expressType = ExpressType.findByValue(iprot.readI32());
        struct.setExpressTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.contentType = FEContentType.findByValue(iprot.readI32());
        struct.setContentTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.format = FEFormatType.findByValue(iprot.readI32());
        struct.setFormatIsSet(true);
      }
      if (incoming.get(8)) {
        struct.length = iprot.readI16();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(9)) {
        struct.textContent = iprot.readString();
        struct.setTextContentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dataContent = iprot.readBinary();
        struct.setDataContentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.expressStatus = ExpressStatus.findByValue(iprot.readI32());
        struct.setExpressStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

}

